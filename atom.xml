<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code &amp; Fun</title>
  
  <subtitle>wuxiaobai24&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.codeand.fun/"/>
  <updated>2020-04-02T14:43:48.831Z</updated>
  <id>http://blog.codeand.fun/</id>
  
  <author>
    <name>wuxiaobai24</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020 02 &amp; 03 Reading</title>
    <link href="http://blog.codeand.fun/2020/04/02/2020-02-03-Reading/"/>
    <id>http://blog.codeand.fun/2020/04/02/2020-02-03-Reading/</id>
    <published>2020-04-02T21:09:55.000Z</published>
    <updated>2020-04-02T14:43:48.831Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从2月7号开始，开始每天花一定的时间看书，想要养成读书的习惯，为了激励一下自己，所以在这里记录下 2、3 月份读的书。</p></blockquote><h2 id="2020-02"><a href="#2020-02" class="headerlink" title="2020-02"></a>2020-02</h2><blockquote><p>2月份读了10本书，大部分书都是在微信上看完的，当时应该有点刻意的让虚构和非虚构的数量相同，所以基本上是一本虚构、一本非虚构的。</p></blockquote><h3 id="《人生海海》"><a href="#《人生海海》" class="headerlink" title="《人生海海》"></a>《人生海海》</h3><blockquote><p>开始时间：2020-02-07</p><p>完成时间：2020-02-09</p><p>评分：★★★★☆</p></blockquote><p>发现了一个本土的好作家——麦家</p><h3 id="《牛奶可乐经济学》"><a href="#《牛奶可乐经济学》" class="headerlink" title="《牛奶可乐经济学》"></a>《牛奶可乐经济学》</h3><blockquote><p>开始时间：2020-02-11</p><p>完成时间：2020-02-17</p><p>评分：★★★☆☆</p></blockquote><p>一开始看感觉还挺好玩的，但看到3分之一时就觉得有些无趣了，可能因为经济学本来就不是什么太有趣的东西吧。ps：有种看十万个为什么的感觉。</p><h3 id="《白夜行》"><a href="#《白夜行》" class="headerlink" title="《白夜行》"></a>《白夜行》</h3><blockquote><p>开始时间：2020-02-17</p><p>完成时间：2020-02-20</p><p>评分：★★★★★</p></blockquote><p>东野圭吾的书，果然没让我失望，“枪虾和虾虎鱼的故事”，强烈推荐。</p><h3 id="《精进》"><a href="#《精进》" class="headerlink" title="《精进》"></a>《精进》</h3><blockquote><p>开始时间：2020-02-17</p><p>完成时间：2020-02-19</p><p>评分：★★★☆☆</p></blockquote><p>知乎式“干货”。第2，3章的一些观点感觉还不错，但后面真的是越看越无趣。</p><h3 id="《娱乐至死》"><a href="#《娱乐至死》" class="headerlink" title="《娱乐至死》"></a>《娱乐至死》</h3><blockquote><p>开始时间：2020-02-19</p><p>完成时间：2020-02-21</p><p>评分：★★★★★</p></blockquote><p>“人们感到痛苦的不是他们用笑声代替了思考，而是他们不知道自己为什么笑以及为什么不再思考。”</p><p>值得多读几遍的书籍。</p><h3 id="《美丽新世界》"><a href="#《美丽新世界》" class="headerlink" title="《美丽新世界》"></a>《美丽新世界》</h3><blockquote><p>开始时间：2020-02-21</p><p>完成时间：2020-02-28</p><p>评分：★★★★★</p></blockquote><p>看这本书是因为看了《娱乐至死》，hhh，貌似我在高中就看过开头，然而当时并没有看下去。</p><h3 id="《呼吸》"><a href="#《呼吸》" class="headerlink" title="《呼吸》"></a>《呼吸》</h3><blockquote><p>开始时间：2020-02-21</p><p>完成时间：2020-02-23</p><p>评分：★★★★☆</p></blockquote><p>看起来像是一部作品集，我对这本书的期望值好像有点过高了，有几篇读起来和寓言故事的感觉。恩，像是《一千零一夜》的感觉。</p><h3 id="《练习的心态》"><a href="#《练习的心态》" class="headerlink" title="《练习的心态》"></a>《练习的心态》</h3><blockquote><p>开始时间：2020-02-23</p><p>完成时间：2020-02-26</p><p>评分：★★★☆☆  </p></blockquote><p>翻译真的是太烂了吧，有些句子读起来都拗口难懂，书中观点也呈现的不够清晰（也可能是翻译的锅），不过感觉书中有些想法还是不错的，感觉看得下去完全是因为有些观点引起了共鸣。</p><h3 id="《月亮与六便士》"><a href="#《月亮与六便士》" class="headerlink" title="《月亮与六便士》"></a>《月亮与六便士》</h3><blockquote><p>开始时间：2020-02-29</p><p>结束时间：2020-03-01</p><p>评分：★★★★☆</p></blockquote><p>我看的那个版本似乎特别冷门，感觉之后可以找其他版本来看看。</p><h2 id="2020-03"><a href="#2020-03" class="headerlink" title="2020-03"></a>2020-03</h2><blockquote><p>这个月读书比较随意，经常同时读好几本书（后来感觉这样不好就改掉了），没想到这样还是读了10本。同时，因为购入了kpw4，所以有一半的书是在 Kindle 上读完的，而且也开始养成了睡前读书的习惯，10点半洗澡，洗完澡就爬到床上去读一个小时的书。感觉这样的生活还是很惬意的，emmm，虽然4月份就不一定有这种好氛围了，哎，美好的假期似乎要结束了。</p></blockquote><h3 id="《如何高效学习》"><a href="#《如何高效学习》" class="headerlink" title="《如何高效学习》"></a>《如何高效学习》</h3><blockquote><p>开始时间：2020-03-02</p><p>结束时间：2020-03-04</p><p>评分：★★★★☆</p></blockquote><p>我应该是第二遍读这本书了，看的时候不断地思考之前自己的做法，发现自己有段时间应该是在践行书中的一些观点的，但是后来似乎就没有有意识地去做这件事了。这也导致了自己有段时间也出现了死读书的情况，比如不思考地抄笔记，记录书中的观点什么的。</p><h3 id="《动物农场》"><a href="#《动物农场》" class="headerlink" title="《动物农场》"></a>《动物农场》</h3><blockquote><p>开始时间：2020-03-03</p><p>结束时间：2020-03-04</p><p>评分：★★★★★</p></blockquote><p>“目光从猪移到人，再从人移到猪，又重新从猪移到人，要分清哪张脸是猪的，哪张脸是人的，已经不可能了。”</p><p>看这本书最开始是因为想读这本书的原版，然而到现在都没开始（捂脸）。</p><h3 id="《掌控习惯》"><a href="#《掌控习惯》" class="headerlink" title="《掌控习惯》"></a>《掌控习惯》</h3><blockquote><p>开始时间：2020-03-04</p><p>结束时间：2020-03-15</p><p>评分：★★★★☆</p></blockquote><p>虽然看到后半部分就感觉有点无聊了，但是还是讲了许多关于习惯的技巧，比如想，将要养成的习惯挂在已经有的习惯后面等等。</p><h3 id="《孤独小说家》"><a href="#《孤独小说家》" class="headerlink" title="《孤独小说家》"></a>《孤独小说家》</h3><blockquote><p>开始时间：2020-03-04</p><p>结束时间：2020-03-07</p><p>评分：★★★★☆</p></blockquote><p>有点碎碎念的小说，看的时候感觉很平淡，但是莫名其妙看的进去。BTW，你要是说，这本书是耕平写的，我完全相信。</p><h3 id="《82年生的金智英》"><a href="#《82年生的金智英》" class="headerlink" title="《82年生的金智英》"></a>《82年生的金智英》</h3><blockquote><p>开始时间：2020-03-08</p><p>结束时间：2020-03-09</p><p>评分：★★★★☆</p></blockquote><p>一本很快就能看完的书，晚上睡前看了一会，然后早上起来看了一会就看完。虽然写的是韩国的事情，但是把地点改成中国也完全不会有违和感。</p><h3 id="《1984》"><a href="#《1984》" class="headerlink" title="《1984》"></a>《1984》</h3><blockquote><p>开始时间：2020-03-18</p><p>结束时间：2020-03-30</p></blockquote><p>看完《娱乐至死》就已经决定要看的书了，一开始有点略微无聊，不过看到后面就还好。</p><h3 id="《房思琪的初恋乐园》"><a href="#《房思琪的初恋乐园》" class="headerlink" title="《房思琪的初恋乐园》"></a>《房思琪的初恋乐园》</h3><blockquote><p>开始时间：2020-03-09</p><p>结束时间：2020-03-13</p><p>评分：★★★★★</p></blockquote><p>这个月让我印象最深刻的书，看这本书的这几天几乎陷进去了，那几天心情有点过于低落。这本书给人一种很奇怪的感觉，一开始看的时候会觉得作者的写作风格很奇怪，读到后半段的时候，会有种既厌恶又难以掩饰喜欢的感觉。</p><h3 id="《微习惯》"><a href="#《微习惯》" class="headerlink" title="《微习惯》"></a>《微习惯》</h3><blockquote><p>开始时间：2020-03-13</p><p>结束时间：2020-03-31</p><p>评分：★★★★☆</p></blockquote><p>很短的一本书，有种看博客集合的感觉，不过看完后，我也想试试“一个俯卧撑挑战”，hhh。</p><h3 id="《无人生还》"><a href="#《无人生还》" class="headerlink" title="《无人生还》"></a>《无人生还》</h3><blockquote><p>开始时间：2020-03-20</p><p>结束时间：2020-03-21</p><p>评分：★★★★☆</p></blockquote><p>士兵岛童谣杀人事件，估计是因为之前在其他地方看到过对这本书的模仿，所以看这本书的时候其实挺无感的。</p><h3 id="《禅与摩托车维修艺术》"><a href="#《禅与摩托车维修艺术》" class="headerlink" title="《禅与摩托车维修艺术》"></a>《禅与摩托车维修艺术》</h3><blockquote><p>开始时间：2020-03-21</p><p>结束时间：2020-03-26</p><p>评分：★★★★☆</p></blockquote><p>游记？哲学书？说实话有点没看懂，书中所说的“良质”是指“Good”吗？？</p><h3 id="总结-amp-Flag"><a href="#总结-amp-Flag" class="headerlink" title="总结 &amp; Flag"></a>总结 &amp; Flag</h3><p>2 月份和 3 月份读的书都是和专业无关的，以后可以稍微增加一点专业相关的书籍。</p><p>接下来是下个月想读的书：</p><ul><li><input disabled="" type="checkbox"> 别逗了，费曼先生</li><li><input disabled="" type="checkbox"> 黑客与画家</li><li><input disabled="" type="checkbox"> 肖申克的救赎</li><li><input disabled="" type="checkbox"> 非暴力沟通</li><li><input disabled="" type="checkbox"> 流浪地球</li><li><input disabled="" type="checkbox"> 乌合之众</li><li><input disabled="" type="checkbox"> Animal Farm</li><li><input disabled="" type="checkbox"> 学习之道</li><li><input disabled="" type="checkbox"> 深入浅出 Docker</li><li><input disabled="" type="checkbox"> MySQL 必知必会</li></ul><p>BTW, 想读 != 一定要读</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Reading" scheme="http://blog.codeand.fun/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://blog.codeand.fun/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>Binary Search Tree Iterator</title>
    <link href="http://blog.codeand.fun/2020/03/31/Binary-Search-Tree-Iterator/"/>
    <id>http://blog.codeand.fun/2020/03/31/Binary-Search-Tree-Iterator/</id>
    <published>2020-03-31T10:55:25.000Z</published>
    <updated>2020-04-02T14:43:48.831Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>貌似又是一道之前做了，但是没写题解的题目。</p></blockquote><p>今天的题目是<a href="https://leetcode-cn.com/problems/binary-search-tree-iterator/" target="_blank" rel="noopener">Binary Search Tree Iterator</a>。</p><p>这道题要求我们按从小到大的顺序返回二叉搜索树的值，而我们知道二叉搜索树的中序遍历就是从小到大的，所以问题就变成了，对一个二叉树的中序遍历问题。</p><p>因为之前总结过<a href="https://blog.codeand.fun/2020/03/24/Binary-Tree-Preorder-Inorder-Postorder-Traversal/">二叉树遍历</a>，所以这里我们可以套用当时提到的三种方法来解这道题：</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>由于题目只要求了<code>next()</code>和<code>hasNext()</code>的时间复杂度，所以我们可以在构造器中对二叉树进行遍历，然后存储下来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    BSTIterator(TreeNode* root) &#123;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        inorderTraversal(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root) &#123;</span><br><span class="line">            inorderTraversal(root-&gt;left);</span><br><span class="line">            vec.push_back(root-&gt;val);</span><br><span class="line">            inorderTraversal(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** @return the next smallest number */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vec[index++];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** @return whether we have a next smallest number */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index != vec.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样<code>next()</code>和<code>hasNext()</code>的时间复杂度肯定是<code>O(1)</code>的，但是空间复杂度却是<code>O(n)</code>，而题目要求的是<code>O(h)</code>。</p><h2 id="基于栈进行迭代。"><a href="#基于栈进行迭代。" class="headerlink" title="基于栈进行迭代。"></a>基于栈进行迭代。</h2><p>基于栈对二叉树进行迭代的中序遍历大体可以分为两部：</p><ol><li>不断地把先左节点移动，并把节点压入栈中（以下简称 step 1)。</li><li>弹出栈顶节点，并输出，然后先右节点方向移动（以下简称 step 2)。</li></ol><p>一旦做完以上两步，我们就输出了一个值。</p><p>因为当时是在一个循环中实现的，所以和现在的情况是不一样的，<code>root</code>是在构造器中输入的，所以我们得在构造器中就把<code>root</code>压入栈中，为了不把过程弄的复杂，所以我们在构造器中就直接把 step 1 给做完，然后在<code>next()</code>中把两步的顺序倒过来，即先执行 step 2 然后执行 step 1，当然 step 2 中的输出操作显然要放到最后来做。因为在两个地方都进行了 step 1，所以我们可以把它抽象成一个单独的函数<code>pushleft</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode *&gt; st;</span><br><span class="line">    BSTIterator(TreeNode* root) &#123;</span><br><span class="line">        pushleft(root);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushleft</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(root) &#123;</span><br><span class="line">            st.push(root);</span><br><span class="line">            root = root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** @return the next smallest number */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> root = st.top(); st.pop();</span><br><span class="line">        pushleft(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** @return whether we have a next smallest number */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !st.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为基于栈的遍历算法的空间复杂度是<code>O(h)</code>，所以上面这个算法的空间复杂度也是<code>O(h)</code>（其实也很好理解，因为栈要临时存放节点个数最大就是 h），然后<code>hasNext()</code>的时间复杂度显然也是<code>O(1)</code>。下面的问题就是，<code>next()</code>的时间复杂度是否是<code>O(1)</code>。</p><p>如果我们仔细观察一下题目的话，我们会发现它要求的是平均时间复杂度，因为一颗有<code>n</code>个节点的树进行遍历，我们需要做<code>n</code>次<code>st.push</code>，同时<code>next()</code>我们也要调用<code>n</code>次才能遍历整棵树，所以<code>n / n = 1</code>，即平均时间复杂度为<code>O(1)</code>。</p><h2 id="莫里斯遍历"><a href="#莫里斯遍历" class="headerlink" title="莫里斯遍历"></a>莫里斯遍历</h2><p>我们先看下莫里斯遍历的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode *<span class="title">GetRightLeaf</span><span class="params">(TreeNode *root, TreeNode *<span class="built_in">end</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(root-&gt;right &amp;&amp; root-&gt;right != <span class="built_in">end</span>) root = root-&gt;right;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            TreeNode *p = GetRightLeaf(root-&gt;left, root);</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;right == root) &#123;</span><br><span class="line">                p-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                root = root-&gt;right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p-&gt;right = root;</span><br><span class="line">                root = root-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            root = root-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几乎可以什么都不用改的情况下，把代码移植过去：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode *root;</span><br><span class="line">    <span class="function">TreeNode *<span class="title">GetRightLeaf</span><span class="params">(TreeNode *root, TreeNode *end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(root-&gt;right &amp;&amp; root-&gt;right != end) root = root-&gt;right;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BSTIterator(TreeNode* _root):root(_root) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** @return the next smallest number */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(root) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">                TreeNode *p = GetRightLeaf(root-&gt;left, root);</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;right == root) &#123;</span><br><span class="line">                    p-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">                    <span class="comment">// cout &lt;&lt; root-&gt;val &lt;&lt; endl;</span></span><br><span class="line">                    res = root-&gt;val;</span><br><span class="line">                    root = root-&gt;right;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    p-&gt;right = root;</span><br><span class="line">                    root = root-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; root-&gt;val &lt;&lt; endl;</span></span><br><span class="line">                res = root-&gt;val;</span><br><span class="line">                root = root-&gt;right;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** @return whether we have a next smallest number */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root != <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个的空间复杂度显然是<code>O(1)</code>，而时间复杂度，我们可以这样理解，每个节点都会被访问两遍，即<code>O(2n)</code>，而<code>next()</code>要调用 n 次，所以时间复杂度是<code>O(2n / 2) = O(2) = O(1)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://blog.codeand.fun/tags/Tree/"/>
    
      <category term="Stack" scheme="http://blog.codeand.fun/tags/Stack/"/>
    
      <category term="Design" scheme="http://blog.codeand.fun/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>Evaluate Reverse Polish Notation</title>
    <link href="http://blog.codeand.fun/2020/03/31/Evaluate-Reverse-Polish-Notation/"/>
    <id>http://blog.codeand.fun/2020/03/31/Evaluate-Reverse-Polish-Notation/</id>
    <published>2020-03-31T09:29:10.000Z</published>
    <updated>2020-04-02T14:43:48.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因为最近在总结 LeetCode 中 <code>Stack</code> 标签下做过的题目，然后这道题做了但是没有写题解，所以补充一下。</p></blockquote><p>一道<code>Medium</code>的题目，但是数据结构课上提到栈时，都会举这个例子才对，所以这道题挺简单的。</p><p>因为输入的已经是解析好的<code>token</code>了，所以不用额外的做 parse 的工作。我们只需要用一个栈来保存操作树即可。</p><ul><li>当遇到一个操作数时，就压入栈中。</li><li>当遇到一个操作符时，就弹出两个操作数，然后根据操作符对这两个操作数进行操作，并将结果压入栈中。</li></ul><p>由于题目保证了输入一定是正确的，所以很多判断都可以省略掉。然后又一个需要主要的就是栈是后进先出的，所以操作数的顺序不要弄反了就好了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isOp</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">size</span>() == <span class="number">1</span> &amp;&amp; (s[<span class="number">0</span>] == <span class="string">'+'</span> || s[<span class="number">0</span>] == <span class="string">'-'</span> || s[<span class="number">0</span>] == <span class="string">'*'</span> || s[<span class="number">0</span>] == <span class="string">'/'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> op, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(op) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>: <span class="keyword">return</span> a + b;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>: <span class="keyword">return</span> a - b;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>: <span class="keyword">return</span> a * b;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>: <span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;s: tokens) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isOp(s)) &#123;</span><br><span class="line">st.push(atoi(s.c_str()));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> b = st.top(); st.pop();</span><br><span class="line"><span class="keyword">int</span> a = st.top(); st.pop(); </span><br><span class="line">st.push(calc(a, s[<span class="number">0</span>], b));</span><br><span class="line">&#125;  <span class="comment">// else return -1;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> st.top();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/tags/LeetCode/"/>
    
      <category term="Stack" scheme="http://blog.codeand.fun/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Gitea + Drone CI/CD</title>
    <link href="http://blog.codeand.fun/2020/03/27/Gitea-Drone-CI-CD/"/>
    <id>http://blog.codeand.fun/2020/03/27/Gitea-Drone-CI-CD/</id>
    <published>2020-03-27T20:38:51.000Z</published>
    <updated>2020-04-02T14:43:48.835Z</updated>
    
    <content type="html"><![CDATA[<p>最近想实践一下 DevOps，所以准备搭建一套代码托管和CI/CD 系统。</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><h3 id="代码托管"><a href="#代码托管" class="headerlink" title="代码托管"></a>代码托管</h3><p>代码托管系统的选择其实并不多：</p><ul><li>Gitea</li><li>Gogs</li><li>GitLab</li></ul><p>由于 <code>Gitlab</code> 资源占用过大，所以可以直接去除（毕竟这个系统只有我一个人在用，而且只有一台1核2G的服务器）。</p><p><code>Gitea</code>是脱胎于<code>Gogs</code>的，在<code>Gogs</code>上做了较多的扩展，而且迭代的也毕竟快。<code>Gitea</code>对现有的代码托管做了<a href="https://docs.gitea.io/zh-cn/comparison/" target="_blank" rel="noopener">横向对比</a>,<br>我们可以看出来<code>Gitea</code>几乎是最优选择。</p><p><code>Gitea</code>有一个比较显著的缺点，它没有像<code>Gitlab</code>一样内置了<code>CI/CD</code>，所以我们必须搭另外一套<code>CI/CD</code>系统。</p><h3 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h3><p>对现有的 CI/CD 进行了一下调研:</p><ul><li>Jenkins<ul><li>优点：最为流行，出现坑的容易找到解决方案</li><li>缺点：用 Java 编写，过于笨重</li></ul></li><li>GitLab CI<ul><li>优点：据说很好用</li><li>缺点：笨重</li></ul></li><li>Drone<ul><li>优点：轻量级，支持<code>Gitea</code></li><li>缺点：生态不够丰富，文档差</li></ul></li></ul><p>在这里我们选择<code>Drone</code>作为<code>CI/CD</code>，主要原因当然是因为只有它轻量级啊。</p><h2 id="Gitea"><a href="#Gitea" class="headerlink" title="Gitea"></a>Gitea</h2><p>在安装<code>Gitea</code>和<code>Drone</code>时，我们都选择使用<code>docker-compose</code>来管理，因此需要先安装<code>docker</code>和<code>docker-compose</code>。</p><p>创建一个<code>gitea</code>文件夹，并在该文件夹下创建<code>docker-compose.yml</code>文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">gitea:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gitea/gitea:1.11</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">USER_UID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">USER_GID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RUN_MODE=prod</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SSH_PORT=</span> <span class="number">3022</span> <span class="comment">#SSH端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SSH_DOMAIN=</span> <span class="comment">#IP地址或URL</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DISABLE_REGISTRATION=False</span> <span class="comment">#取消注册</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gitea</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./gitea:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/timezone:/etc/timezone:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3000:3000"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3022:3022"</span></span><br></pre></td></tr></table></figure><p>这里面需要注意的是，设置<code>SSH_PORT</code>和<code>SSH_DOMAIN</code>，这样 gitea 生成的 repo SSH 链接才是能直接使用的形式。</p><p>填写完后，直接<code>docker-compose up -d</code>开启服务即可，第一次登陆时，会跳出一个安装页面，可以设置所使用的数据库和管理员账号，同时要记得检查一下 SSH 端口和域名是否正确。</p><h2 id="Drone"><a href="#Drone" class="headerlink" title="Drone"></a>Drone</h2><p><code>Drone</code>的安装比<code>Gitea</code>复杂的多，同时需要先在<code>Gitea</code>中创建<code>OAuth2</code>应用程序：</p><p>打开<code>Gitea</code>的页面 -&gt; 个人信息 -&gt; 应用 -&gt; 管理 OAuth2 应用程序</p><p><img src="http://imagehosting.wuxiaobai24.fun/blogGitea-Drone-CI-CD-20200327211442-2020-03-27" alt="Gitea-Drone-CI-CD-20200327211442-2020-03-27"></p><p>应用名称填什么都无所谓，但是重定向 URL 比较重要，要填 <code>Drone</code>服务的地址（虽然现在还没启动），比如说，你的 Drone 的 <code>ip</code> 地址为<code>1.2.3.4</code>，<code>Drone</code>端口的为<code>8000</code>，<br>那么就可以填<code>http://1.2.3.4:8000</code>。</p><p>创建后会得到一个客户端ID和客户端密钥。这时，<code>Gitea</code>的设置就已经完成了。</p><p>为了让<code>Drone Server</code>和<code>Drone Runer</code>能够通过<code>RPC</code>连接，我们需要生成<code>RPC</code>密钥，可以在 shell 中使用该命令来生成随机数，用该随机数作为 RPC 的密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl rand -hex 16</span><br></pre></td></tr></table></figure><p>上面的操作中可以得到：</p><ul><li>客户端 ID</li><li>客户端密钥</li><li>RPC 密钥</li></ul><p>创建一个<code>drone</code>文件夹并在其中创建一个<code>docker-compose.yml</code>文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.5"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">drone:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">drone_network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">drone-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/drone:1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8000</span><span class="string">:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">drone</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./drone-data:/var/lib/drone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITEA_CLIENT_ID=</span> <span class="comment"># Gitea 客户端ID</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITEA_CLIENT_SECRET=</span> <span class="comment"># Gitea 客户端密钥</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITEA_SERVER=</span> <span class="comment"># Gitea URL 地址</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITEA=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=</span> <span class="comment"># Drone RPC 密钥</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_HOST=</span> <span class="comment"># Drone URL,可以填域名或 ip:port</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DRONE_SERVER_PROTO=http</span> <span class="comment"># Drone 所使用的协议 http 或者 https</span></span><br><span class="line">  <span class="comment"># 由于我的 Gitea 的设置是只允许登陆用户访问代码的，所以 Git 需要 Auth</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GIT_ALWAYS_AUTH=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GIT_USERNAME=</span> <span class="comment"># Gitea 用户名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GIT_PASSWORD=</span> <span class="comment"># Gitea 密码</span></span><br><span class="line">  <span class="attr">drone-agent:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/drone-runner-docker:1</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">drone-server</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">drone</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=</span> <span class="comment"># 这里的密钥要和 Server 一样</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_PROTO=http</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_HOST=</span> <span class="comment"># 和上面的 DRONE_SERVER_HOST</span></span><br></pre></td></tr></table></figure><p>和<code>Gitea</code>同理，我们只需要在<code>docker-compose up -d</code>即可。</p><p>第一次打开 Drone 会先跳到 Gitea 进行验证。由于打开 Drone 会验证 Gitea 是否登陆，所以不用担心 Drone 的页面直接暴露到公网。</p><h3 id="测试-Drone-和-Gitea"><a href="#测试-Drone-和-Gitea" class="headerlink" title="测试 Drone 和 Gitea"></a>测试 Drone 和 Gitea</h3><ol><li>在 Gitea 中创建一个 repo</li><li>在 Drone 激活该 repo</li><li>创建公钥并加入到 gitea 中（这一步和 Github 类似）</li><li>将 repo clone 到本地</li><li>创建一个<code>.drone.yml</code>文件：</li><li>git commit and push</li></ol><p><code>.drone.yml</code>的样例如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">pipeline</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">docker</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">greeting</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">alpine</span></span><br><span class="line">  <span class="attr">commands:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">hello</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">world</span></span><br></pre></td></tr></table></figure><p>关于<code>.drone.yml</code>的信息可以查看<a href="https://docs.drone.io/" target="_blank" rel="noopener">官方文档</a>。</p><p>之后估计也会写一篇 blog 对 Drone 的使用进行下总结。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="DevOps" scheme="http://blog.codeand.fun/categories/DevOps/"/>
    
    
      <category term="Gitea" scheme="http://blog.codeand.fun/tags/Gitea/"/>
    
      <category term="Drone" scheme="http://blog.codeand.fun/tags/Drone/"/>
    
      <category term="CI/CD" scheme="http://blog.codeand.fun/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree (Preorder|Inorder|Postorder) Traversal</title>
    <link href="http://blog.codeand.fun/2020/03/24/Binary-Tree-Preorder-Inorder-Postorder-Traversal/"/>
    <id>http://blog.codeand.fun/2020/03/24/Binary-Tree-Preorder-Inorder-Postorder-Traversal/</id>
    <published>2020-03-24T12:10:21.000Z</published>
    <updated>2020-04-02T14:43:48.831Z</updated>
    
    <content type="html"><![CDATA[<p>今天将二叉树的先、中、后遍历的做了一些总结。三种遍历都有三种写法：</p><ul><li>递归<ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(h)</code>，<code>h</code>为树高</li></ul></li><li>基于栈进行迭代：<ul><li>时间复杂度:<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul></li><li>莫里斯算法：<ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(1)</code></li></ul></li></ul><p>接下来内容有一下几个部分组成：</p><ol><li>首先介绍二叉树先、中、后序遍历的含义</li><li>递归算法</li><li>基于栈的迭代算法</li><li>莫里斯算法</li></ol><h2 id="二叉树-amp-先、中、后序遍历"><a href="#二叉树-amp-先、中、后序遍历" class="headerlink" title="二叉树 &amp; 先、中、后序遍历"></a>二叉树 &amp; 先、中、后序遍历</h2><p><img src="https://g.gravizo.com/svg?digraph%20G%20%7B%20node%5Bshape=circle%5D%20edge%5Barrowhead=vee%5D%201-%3E2;%201-%3E5;%202-%3E3;%202-%3E4;%20%7D" alt=""></p><ul><li><p>先序遍历：</p><blockquote><ol><li>访问当前节点</li><li>遍历左子树</li><li>遍历右子树</li></ol></blockquote></li><li><p>中序遍历：</p><blockquote><ol><li>遍历左子树</li><li>访问当前节点</li><li>遍历右子树</li></ol></blockquote></li><li><p>后序遍历：</p><blockquote><ol><li>遍历左子树</li><li>遍历右子树</li><li>访问当前节点</li></ol></blockquote></li></ul><p>如上图中显示的二叉树中，先、中、后序遍历分别为：</p><ul><li>先序：<code>1 2 3 4 5</code></li><li>中序：<code>3 2 4 1 5</code></li><li>后序：<code>3 4 2 5 1</code></li></ul><h2 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h2><p>已知三种遍历的含义之后，我们可以很容易的写出三种遍历的递归算法:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prevorderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        prevorderTraversal(root-&gt;left);</span><br><span class="line">        prevorderTraversal(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        inorderTraversal(root-&gt;left);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        inorderTraversal(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        postorderTraversal(root-&gt;left);</span><br><span class="line">        postorderTraversal(root-&gt;right);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于递归算法比较简单，所以这里不做过多的说明。</p><p>为了方便，访问节点时，只是输出节点的值。</p></blockquote><h2 id="基于栈的迭代算法"><a href="#基于栈的迭代算法" class="headerlink" title="基于栈的迭代算法"></a>基于栈的迭代算法</h2><h3 id="基于栈的迭代算法——先序遍历"><a href="#基于栈的迭代算法——先序遍历" class="headerlink" title="基于栈的迭代算法——先序遍历"></a>基于栈的迭代算法——先序遍历</h3><p>基于栈的遍历算法中，先序遍历是最简单的。因为先序遍历本身可以进行尾递归优化，所以很容易用<code>stack</code>对递归调用进行模拟：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode *&gt; st;</span><br><span class="line">    <span class="keyword">if</span> (root) st.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!st.empty()) &#123;</span><br><span class="line">        root = st.top(); st.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) st.push(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) st.push(root-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，因为栈用后进先出的特性，所以要先将右子树压入栈中，然后再将左子树压入栈中。</p><h3 id="基于栈的迭代算法——中序遍历"><a href="#基于栈的迭代算法——中序遍历" class="headerlink" title="基于栈的迭代算法——中序遍历"></a>基于栈的迭代算法——中序遍历</h3><p><img src="http://imagehosting.wuxiaobai24.fun/blogBinary-Tree-Preorder-Inorder-Postorder-Traversal-20200328094051-2020-03-28" alt="Binary-Tree-Preorder-Inorder-Postorder-Traversal-20200328094051-2020-03-28"></p><p>我们以上图为例子，其中圆圈表示树中的节点，而三角形表示子树。其中的序号为访问顺序，我们可以发现，进行中序遍历的二叉树都符合这样的移动规律：</p><ol><li>先一直往左孩子的方向移动，直到没有左孩子。</li><li>然后访问该节点，并遍历其右子树（这时相当于对其右子树进行 1、2、3步）。</li><li>最后返回到其父节点并从第 2 步开始。</li></ol><p>为了方便实现和代码的简洁，我们可以把观察到规律转换一下：</p><ol><li>先一直往左孩子的方向移动，直到当前节点为空，同时把所有经过的节点压入栈中。</li><li>如果栈不空，则将栈顶弹出并访问，向右孩子移动并返回第一步。</li></ol><p>因此我们可以写出如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode *&gt; st;</span><br><span class="line">    <span class="keyword">while</span>(root || !st.empty()) &#123;</span><br><span class="line">        <span class="keyword">while</span>(root) &#123;</span><br><span class="line">            st.push(root);</span><br><span class="line">            root = root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 栈一定不为空</span></span><br><span class="line">        root = st.top(); st.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        root = root-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于栈的迭代算法——后序遍历"><a href="#基于栈的迭代算法——后序遍历" class="headerlink" title="基于栈的迭代算法——后序遍历"></a>基于栈的迭代算法——后序遍历</h3><p><img src="http://imagehosting.wuxiaobai24.fun/blogBinary-Tree-Preorder-Inorder-Postorder-Traversal-20200328094135-2020-03-28" alt="Binary-Tree-Preorder-Inorder-Postorder-Traversal-20200328094135-2020-03-28"></p><p>后序遍历与中序遍历有些类似，同样需要先一直往左孩子方向移动直到没有左孩子，但是后序遍历要先访问完右子树才能访问当前节点，因此对于栈顶节点是否要访问并弹出，我们需要判断其右子树是否被访问了。同时，因为后序遍历中，一颗树的根节点是最后访问的，所以我们可以根据右孩子是否被访问了来判断右子树是否被访问了。而我们知道，当访问完右孩子，就可以马上访问该节点了，所以我们可以维护一个指针，该指针指向上一次被访问的节点。通过判断上一次被访问的节点是否为右子树或者<code>nullpter</code>，我们就可以知道是否要访问该节点并弹栈了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    TreeNode *prev = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode *&gt; st;</span><br><span class="line">    <span class="keyword">while</span>(root || !st.empty()) &#123;</span><br><span class="line">        <span class="keyword">while</span>(root) &#123;</span><br><span class="line">            st.push(root);</span><br><span class="line">            root = root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        root = st.top();</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right == <span class="literal">nullptr</span> || root-&gt;right == prev) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; root &lt;&lt; right &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            prev = root;</span><br><span class="line">            root = <span class="literal">nullptr</span>;</span><br><span class="line">            st.pop();</span><br><span class="line">        &#125; <span class="keyword">else</span> root = root-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="莫里斯算法"><a href="#莫里斯算法" class="headerlink" title="莫里斯算法"></a>莫里斯算法</h2><p>莫里斯算法是一种用时间来换空间的二叉树遍历算法。他只需要<code>O(1)</code>的空间复杂度。</p><p>个人觉得它非常像中序线索树，所以我们先介绍中序线索树，然后再来理解莫里斯遍历。</p><h3 id="中序线索树"><a href="#中序线索树" class="headerlink" title="中序线索树"></a>中序线索树</h3><p>假设一颗二叉树有<code>N</code>个节点，因为每个节点有 2 个指向孩子的指针，所以我们就有了 <code>2*N</code> 个指向节点的指针。同时，因为根节点不需要指针指向它，所以我们就使用了<code>2*N - (N-1) = N + 1</code>个空指针。线索树的想法就是将这些空指针利用上，来加快遍历速度的。</p><p><img src="http://imagehosting.wuxiaobai24.fun/blogBinary-Tree-Preorder-Inorder-Postorder-Traversal-20200328104922-2020-03-28" alt="Binary-Tree-Preorder-Inorder-Postorder-Traversal-20200328104922-2020-03-28"></p><p>对于上面的二叉树来说，其中序遍历的结果为<code>[6 4 7 2 5 8 9 1 3]</code>。</p><p>如果节点 A 被访问后，马上访问 B，我们就认为 A 是 B 的前驱，B 是 A 的后继。从中序遍历的结果可以看出 6 是 4 的前驱，4 是 6 的后继。</p><p><img src="http://imagehosting.wuxiaobai24.fun/blogBinary-Tree-Preorder-Inorder-Postorder-Traversal-20200328105557-2020-03-28" alt="Binary-Tree-Preorder-Inorder-Postorder-Traversal-20200328105557-2020-03-28"></p><p>上图中，红色虚线表示后继，绿色虚线表示前驱，一般我们将前驱放在左孩子，后继放在右孩子中。为了区分一个节点的两个孩子指针到底是真的孩子，还是线索，一般需要在每个节点中增加两个flag 位来区分。</p><h3 id="莫里斯算法——中序遍历"><a href="#莫里斯算法——中序遍历" class="headerlink" title="莫里斯算法——中序遍历"></a>莫里斯算法——中序遍历</h3><p>因为中序线索树需要给每个节点都增加两个<code>flag</code>，但是因为很多时候我们不能修改二叉树节点的数据结构，所以它在很多情况是不适合的。通过观察我们可以发现，<strong>在建立完中序线索树后，一个节点的左子树中最右边的节点的后继线索是总指向该节点的</strong>。我们可以根据这个规律来判断当前节点是否需要访问，是向左孩子移动还是向右孩子移动。同时，因为遍历时不需要用到前驱，所以我们不用建立前驱的节点，只需要建立后继即可。</p><p><img src="http://imagehosting.wuxiaobai24.fun/blogBinary-Tree-Preorder-Inorder-Postorder-Traversal-20200328112150-2020-03-28" alt="Binary-Tree-Preorder-Inorder-Postorder-Traversal-20200328112150-2020-03-28"></p><p>当我们访问节点<code>root</code>的时候：</p><ul><li>如果它有左孩子，则找出左子树中最右边节点，并将该节点的右孩子设置为<code>root</code>（建立线索），并向左孩子移动。</li><li>如果它有左孩子，同时在找出左子树最右边节点的时候，如果发现某个节点的右孩子为<code>root</code>，则表示为该节点为左子树的最右边的节点，且已经建立了线索。这表示我们已经访问过左子树了。我们可以清除线索，访问<code>root</code>节点，并向右子树移动。</li><li>如果它没有左孩子，则直接访问<code>root</code>，并向右子树移动。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode *<span class="title">GetRightLeaf</span><span class="params">(TreeNode *root, TreeNode *<span class="built_in">end</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(root-&gt;right &amp;&amp; root-&gt;right != <span class="built_in">end</span>) root = root-&gt;right;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            TreeNode *p = GetRightLeaf(root-&gt;left, root);</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;right == root) &#123;</span><br><span class="line">                p-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                root = root-&gt;right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p-&gt;right = root;</span><br><span class="line">                root = root-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            root = root-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="莫里斯算法——先序遍历"><a href="#莫里斯算法——先序遍历" class="headerlink" title="莫里斯算法——先序遍历"></a>莫里斯算法——先序遍历</h3><p>在莫里斯算法中，先序遍历与中序遍历非常想，只是访问<code>root</code>的节点的位置变了。在中序遍历中，我们总是在向右子树移动的时候访问<code>root</code>节点。而在先序遍历的中，我们总是在向左子树移动的时候访问<code>root</code>。当然，在没有左孩子的情况时，一样也是先访问<code>root</code>节点，再想右孩子移动。</p><p>当我们访问节点<code>root</code>的时候：</p><ul><li>如果它有左孩子，则找出左子树中最右边节点，并将该节点的右孩子设置为<code>root</code>（建立线索），访问<code>root</code>节点，并向左孩子移动。</li><li>如果它有左孩子，同时在找出左子树最右边节点的时候，如果发现某个节点的右孩子为<code>root</code>，则表示为该节点为左子树的最右边的节点，且已经建立了线索。这表示我们已经访问过左子树了。我们可以清除线索，并向右子树移动。</li><li>如果它没有左孩子，则直接访问<code>root</code>，并向右子树移动。</li></ul><p>因此代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode *<span class="title">GetRightLeaf</span><span class="params">(TreeNode *root, TreeNode *<span class="built_in">end</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(root-&gt;right &amp;&amp; root-&gt;right != <span class="built_in">end</span>) root = root-&gt;right;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(root) &#123;    </span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            <span class="comment">// if (root-&gt;right == nullptr) cout &lt;&lt; "NULL" &lt;&lt; endl;</span></span><br><span class="line">            TreeNode *p = GetRightLeaf(root-&gt;left, root);</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;right == root) &#123;</span><br><span class="line">                p-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">                root = root-&gt;right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p-&gt;right = root;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                root = root-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">            root = root-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="莫里斯遍历——后序遍历"><a href="#莫里斯遍历——后序遍历" class="headerlink" title="莫里斯遍历——后序遍历"></a>莫里斯遍历——后序遍历</h3><p><img src="http://imagehosting.wuxiaobai24.fun/blogBinary-Tree-Preorder-Inorder-Postorder-Traversal-20200328115304-2020-03-28" alt="Binary-Tree-Preorder-Inorder-Postorder-Traversal-20200328115304-2020-03-28"></p><p>通过观察，我们可以发现先、中、后序遍历有上面这种规律，因此我们可以发现，当所有左子树被访问完了（这时只剩下一条由右孩子组成的边，这里为了简便，将其称为，右边），按逆序访问由右边即可。</p><p>当我们访问节点<code>root</code>的时候：</p><ul><li>如果它有左孩子，则找出左子树中最右边节点，并将该节点的右孩子设置为<code>root</code>（建立线索），并向左孩子移动。</li><li>如果它有左孩子，同时在找出左子树最右边节点的时候，如果发现某个节点的右孩子为<code>root</code>，则表示为该节点为左子树的最右边的节点，且已经建立了线索。这表示我们已经访问过左子树了。我们可以清除线索，<strong>逆序访问左子树的右边。</strong></li><li>如果它没有左孩子，并向右子树移动。</li></ul><p>按上面的算法进行的话，会导致有一条右边没办法访问到，所以增加一个虚节点，该虚节点的左孩子为<code>root</code>,右孩子为空，即：</p><p><img src="http://imagehosting.wuxiaobai24.fun/blogBinary-Tree-Preorder-Inorder-Postorder-Traversal-20200328120751-2020-03-28" alt="Binary-Tree-Preorder-Inorder-Postorder-Traversal-20200328120751-2020-03-28"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode *<span class="title">GetRightLeaf</span><span class="params">(TreeNode *root, TreeNode *<span class="built_in">end</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(root-&gt;right &amp;&amp; root-&gt;right != <span class="built_in">end</span>) root = root-&gt;right;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TreeNode *<span class="title">reverse</span><span class="params">(TreeNode *p, <span class="keyword">const</span> function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>)&gt; &amp;func)</span> </span>&#123;</span><br><span class="line">    TreeNode *prev, *next;</span><br><span class="line">    prev = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        func(p-&gt;val);</span><br><span class="line">        next = p-&gt;right;</span><br><span class="line">        p-&gt;right = prev;</span><br><span class="line">        prev = p;</span><br><span class="line">        p = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">postorderTraversal2</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="function">TreeNode <span class="title">node</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    node.left = root;</span><br><span class="line">    root = &amp;node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> func1 = [&amp;](<span class="keyword">int</span> val) &#123;</span><br><span class="line">        res.push_back(val);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> func2 = [](<span class="keyword">int</span> val) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            TreeNode *p = GetRightLeaf(root-&gt;left, root);</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;right == root) &#123;</span><br><span class="line">                p-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">                p = reverse(root-&gt;left, func2);</span><br><span class="line">                reverse(p, func1);</span><br><span class="line">                root = root-&gt;right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p-&gt;right = root;</span><br><span class="line">                root = root-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> root = root-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了使得空间复杂度为<code>O(1)</code>，在逆序访问时，我们通过“翻转链表”的方式进行逆序访问，而不是用栈来实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://blog.codeand.fun/tags/Tree/"/>
    
      <category term="Stack" scheme="http://blog.codeand.fun/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Stack Tag 总结</title>
    <link href="http://blog.codeand.fun/2020/03/23/LeetCode-Stack-Tag-%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.codeand.fun/2020/03/23/LeetCode-Stack-Tag-%E6%80%BB%E7%BB%93/</id>
    <published>2020-03-23T10:03:40.000Z</published>
    <updated>2020-04-02T14:43:48.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>准备按 Tag 过一遍之前刷过的 LeetCode，总结一些常用的技巧和套路。</p></blockquote><h2 id="题目列表"><a href="#题目列表" class="headerlink" title="题目列表"></a>题目列表</h2><table><thead><tr><th align="left">Name</th><th align="left">No</th><th align="left">Difficulty</th><th align="left">Blog Link</th><th align="left">Note</th></tr></thead><tbody><tr><td align="left"><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">Valid Parentheses</a></td><td align="left">20</td><td align="left">Easy</td><td align="left"><a href="https://blog.codeand.fun/2017/09/24/Valid-Parentheses/">https://blog.codeand.fun/2017/09/24/Valid-Parentheses/</a></td><td align="left">可以建一个右括号到左括号的<code>map</code>来使代码更加简洁</td></tr><tr><td align="left"><a href="https://leetcode-cn.com/problems/simplify-path/" target="_blank" rel="noopener">Simplify Path</a></td><td align="left">71</td><td align="left">Medium</td><td align="left"><a href="https://blog.codeand.fun/2019/03/02/Simplify-Path/">https://blog.codeand.fun/2019/03/02/Simplify-Path/</a></td><td align="left">用FSM的思想也可以解，可以用<code>stringstream</code>和<code>getline</code>进行字符串分割</td></tr><tr><td align="left"><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">Binary Tree Inorder Traversal</a></td><td align="left">94</td><td align="left">Medium</td><td align="left"><a href="https://blog.codeand.fun/2020/03/24/Binary-Tree-Preorder-Inorder-Postorder-Traversal/">https://blog.codeand.fun/2020/03/24/Binary-Tree-Preorder-Inorder-Postorder-Traversal/</a></td><td align="left">递归、栈、莫里斯遍历</td></tr><tr><td align="left"><a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/" target="_blank" rel="noopener"> Binary Tree Zigzag Level Order Traversal</a></td><td align="left">103</td><td align="left">Medium</td><td align="left"><a href="https://blog.codeand.fun/2018/02/11/Binary-Tree-Zigzag-Level-Order-Traversal/">https://blog.codeand.fun/2018/02/11/Binary-Tree-Zigzag-Level-Order-Traversal/</a></td><td align="left">用栈来模拟，可以避免逆序操作</td></tr><tr><td align="left"><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener">Binary Tree Preorder Traversal</a></td><td align="left">144</td><td align="left">Medium</td><td align="left"><a href="https://blog.codeand.fun/2020/03/24/Binary-Tree-Preorder-Inorder-Postorder-Traversal/">https://blog.codeand.fun/2020/03/24/Binary-Tree-Preorder-Inorder-Postorder-Traversal/</a></td><td align="left">递归、栈、莫里斯遍历</td></tr><tr><td align="left"><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal" target="_blank" rel="noopener">Binary Tree Postorder Traversal</a></td><td align="left">145</td><td align="left">Medium</td><td align="left"><a href="https://blog.codeand.fun/2020/03/24/Binary-Tree-Preorder-Inorder-Postorder-Traversal/">https://blog.codeand.fun/2020/03/24/Binary-Tree-Preorder-Inorder-Postorder-Traversal/</a></td><td align="left"><code>function</code>对象+<code>lambda</code>表达式可以减少代码冗余。</td></tr><tr><td align="left"><a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/" target="_blank" rel="noopener">Evaluate Reverse Polish Notation</a></td><td align="left">150</td><td align="left">Medium</td><td align="left"><a href="https://blog.codeand.fun/2020/03/31/Evaluate-Reverse-Polish-Notation/">https://blog.codeand.fun/2020/03/31/Evaluate-Reverse-Polish-Notation/</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://leetcode-cn.com/problems/binary-search-tree-iterator/" target="_blank" rel="noopener">Binary Search Tree Iterator</a></td><td align="left">173</td><td align="left">Medium</td><td align="left"><a href="https://blog.codeand.fun/2020/03/31/Binary-Search-Tree-Iterator/">https://blog.codeand.fun/2020/03/31/Binary-Search-Tree-Iterator/</a></td><td align="left">可以用递归、栈和莫里斯遍历来实现中序遍历</td></tr><tr><td align="left"><a href="https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree/" target="_blank" rel="noopener">Verify Preorder Serialization of a Binary Tree</a></td><td align="left">331</td><td align="left">Medium</td><td align="left"><a href="https://blog.codeand.fun/2018/02/19/Verify-Preorder-Serialization-of-a-Binary-Tree/">https://blog.codeand.fun/2018/02/19/Verify-Preorder-Serialization-of-a-Binary-Tree/</a></td><td align="left">??这道题和栈好像没有关系啊，不用栈去想反而更简单更快</td></tr><tr><td align="left"><a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator/" target="_blank" rel="noopener">Flatten Nested List Iterator</a></td><td align="left">341</td><td align="left">Medium</td><td align="left"></td><td align="left"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/tags/LeetCode/"/>
    
      <category term="Stack" scheme="http://blog.codeand.fun/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>《 Java 编程思想》CH09 接口</title>
    <link href="http://blog.codeand.fun/2020/02/19/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH09-%E6%8E%A5%E5%8F%A3/"/>
    <id>http://blog.codeand.fun/2020/02/19/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH09-%E6%8E%A5%E5%8F%A3/</id>
    <published>2020-02-19T11:52:21.000Z</published>
    <updated>2020-04-02T14:43:48.839Z</updated>
    
    <content type="html"><![CDATA[<p><strong>接口和内部类为我们提供了一种将接口与实现分离的更加结构化的方法。</strong></p><h2 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h2><p>Java 提供一个叫做“抽象方法”的机制来建立通用接口，这样不同的子类可以用不同的方式表示此接口。如<code>abstract void fun()</code>。<br>包含抽象方法的类叫做抽象类，如果一个类包含一个或多个抽象方法，则该类必须限定为抽象的，如<code>abstract class ClassName</code>。</p><p>如果一个从一个抽象类中继承，我们需要为基类中所有的抽象方法提供定义，否则该导出类也是抽象类，需要用<code>abstract</code>进行限定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(Note n)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">what</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"Instrument"</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><code>interface</code>关键字可以产生一个完全抽象的类，它允许创建者确定方法名，参数列表和返回类型，但是没有任何方法体。<strong>接口只提供了形式，但是没有提供任何实现</strong>。通常，接口被用来建立类之间的协议。之所以有了抽象类后还需要接口是因为：<strong>一个类可以实现多个接口，从而实现类似多继承的特性</strong>。</p><p>接口有两种访问权限：</p><ul><li>public</li><li>包访问权限</li></ul><p>接口中可以包含域，但是这些域隐式地是<code>public</code>和<code>static</code>的。接口中的方法是<code>public</code>的，因此类在实现接口时，必须指定方法为<code>public</code>的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InstrumentInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> VALUE = <span class="number">5</span>; <span class="comment">// static final public</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">(Note n)</span></span>; <span class="comment">// public</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wind</span> <span class="keyword">implements</span> <span class="title">InstrumentInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(Note n)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Wind.play() n = "</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">what</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Wind"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完全解耦"><a href="#完全解耦" class="headerlink" title="完全解耦"></a>完全解耦</h2><p>策略设计模式：创建一个能够根据所传递的参数对象的不同而具有不同行为的方法。这类方法包含要执行算法中固定不变的部分，而“策略”包含变化的部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Object <span class="title">process</span><span class="params">(Object input)</span> </span>&#123; <span class="keyword">return</span> input; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upcase</span> <span class="keyword">extends</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123; <span class="comment">// 协变返回类型</span></span><br><span class="line">        <span class="keyword">return</span> ((String) input).toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Downcase</span> <span class="keyword">extends</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((String) input).toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Splitter</span> <span class="keyword">extends</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(((String) input).split(<span class="string">" "</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apply</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Processor p, Object s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Using Processor p.name() = "</span> + p.name());</span><br><span class="line">        System.out.println(p.process(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s = <span class="string">"Disagreement with beliefs is by definition incorrect"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        process(<span class="keyword">new</span> Upcase(), s);</span><br><span class="line">        process(<span class="keyword">new</span> Downcase(), s);</span><br><span class="line">        process(<span class="keyword">new</span> Splitter(), s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>Filter</code>类与<code>Processer</code>有相同的接口，但是它不是继承与<code>Processer</code>，那么它就不能被<code>Apply.proceess</code>所使用。这是因为<code>Processer</code>和<code>Apply</code>过于耦合了，而导致我们没法复用代码。我们可以将<code>Processer</code>转变成接口来解耦。我们可以依据接口来实现<code>Filter</code>，也可以用适配器设计模式来完成。设配器中代码将接收已有的接口/代码，实现需要的接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class FilterAdapter implements Processor &#123;</span><br><span class="line">  Filter filter;</span><br><span class="line">  public FilterAdapter(Filter filter) &#123;</span><br><span class="line">    this.filter &#x3D; filter;</span><br><span class="line">  &#125;</span><br><span class="line">  public String name() &#123;</span><br><span class="line">    return filter.name();</span><br><span class="line">  &#125;</span><br><span class="line">  public Waveform process(Object object) &#123;</span><br><span class="line">    return filter.process((Waveform)objec);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-中的多重继承"><a href="#Java-中的多重继承" class="headerlink" title="Java 中的多重继承"></a>Java 中的多重继承</h2><p>Java 可以组合多个接口来实现了类似C++中的多继承。</p><ul><li>实现一个接口需要保证接口中所有方法类中都有，<strong>该方法可以继承自基类</strong>。</li><li>使用接口的原因：<ul><li>为了能够向上转型为多个基类</li><li>防止客户端创建该类的对象，并确保这个仅仅是一个接口</li></ul></li><li>如果要创建不带任何方法定义和成员变量的基类，那就应该选择接口而不是抽象类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch09;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CanFight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CanSwim</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CanFly</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionCharacter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span> <span class="keyword">extends</span> <span class="title">ActionCharacter</span> <span class="keyword">implements</span> <span class="title">CanFight</span>, <span class="title">CanFly</span>, <span class="title">CanSwim</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意到这里fight()函数是继承与ActionCharac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adventure</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">t</span><span class="params">(CanFight x)</span> </span>&#123;</span><br><span class="line">        x.fight();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">u</span><span class="params">(CanSwim x)</span> </span>&#123;</span><br><span class="line">        x.swim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">(CanFly x)</span> </span>&#123;</span><br><span class="line">        x.fly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">(ActionCharacter x)</span> </span>&#123;</span><br><span class="line">        x.fight();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero h = <span class="keyword">new</span> Hero();</span><br><span class="line">        t(h);</span><br><span class="line">        u(h);</span><br><span class="line">        v(h);</span><br><span class="line">        w(h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过继承来扩展接口"><a href="#通过继承来扩展接口" class="headerlink" title="通过继承来扩展接口"></a>通过继承来扩展接口</h2><ul><li>接口可以继承一个或多个接口</li><li>接口中方法签名同样是由函数名和参数列表组成的，因此如果两个接口有相同函数名和参数类型的方法，并且返回类型不相同的话，则不能同时<code>implement</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CanFight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CanSwim</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CanFightAndSwim</span> <span class="keyword">extends</span> <span class="title">CanFight</span>, <span class="title">CanSwim</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口中的域"><a href="#接口中的域" class="headerlink" title="接口中的域"></a>接口中的域</h2><p>接口中的的域都是 static 和 final 的，所以接口用来创建常量组，接口中定义的域不能是”空final“，但是可以被非常量表达式初始化。现在建议使用<code>enum</code>来创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RandVals</span> </span>&#123;</span><br><span class="line">  Random RAND = <span class="keyword">new</span> Random(<span class="number">24</span>);</span><br><span class="line">  <span class="keyword">int</span> RANDOM_INT = RAND.nextInt(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">long</span> RANDOM_LONG = RAND.nextLong(<span class="number">20</span>) * <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套接口"><a href="#嵌套接口" class="headerlink" title="嵌套接口"></a>嵌套接口</h2><p>接口可以嵌套在类或其他皆苦中。</p><p>嵌套在类中的接口除了 public 和包访问权限，还有 private 访问权限。</p><p>嵌套在接口中的接口自动是 public 访问权限。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/categories/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
    
      <category term="Java" scheme="http://blog.codeand.fun/tags/Java/"/>
    
      <category term="阅读笔记" scheme="http://blog.codeand.fun/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
      <category term="后端" scheme="http://blog.codeand.fun/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>《 Java 编程思想》CH08 多态</title>
    <link href="http://blog.codeand.fun/2020/02/18/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH08-%E5%A4%9A%E6%80%81/"/>
    <id>http://blog.codeand.fun/2020/02/18/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH08-%E5%A4%9A%E6%80%81/</id>
    <published>2020-02-18T11:19:00.000Z</published>
    <updated>2020-04-02T14:43:48.839Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在面向对象的程序设计语言中，多态是继数据抽象和继承之后的第三种基本特征。</li><li>多态通过分离做什么和怎么做，从另一个角度将接口和实现分离开来。</li><li>“封装”通过合并特征和行为来创建新的数据类型。“实现隐藏”则通过将细节“私有化”把接口和实现分离开来，而多态的作用则是消除类型之间的耦合关系。</li></ul><h2 id="再论向上转型-amp-转机"><a href="#再论向上转型-amp-转机" class="headerlink" title="再论向上转型 &amp; 转机"></a>再论向上转型 &amp; 转机</h2><ul><li>对象既可以作为它自己本身的类型使用，也可以作为它的基类使用，而这种把某个对象的引用视为其基类的引用的做法被称为“向上转型”</li><li>将一个方法调用同一个方法主体关联起来被称为<strong>绑定</strong>。<ul><li>若在程序执行前进行绑定（如果有的话，由编译器和链接器实现），叫做<strong>前期绑定</strong>。</li><li>若在运行时根据对象的类型进行绑定，则叫做<strong>后期绑定</strong>，也叫做<strong>动态绑定</strong>或<strong>运行时绑定</strong>。</li></ul></li><li>Java 中除了 static 方法和 final 方法（private 方法属于 final 方法）外，其他所有方法都是后期绑定的。</li><li>Java 用动态绑定实现了多态后，我们可以只编写与基类相关的代码，而这些代码可以对所有该基类的导出类正确运行。</li><li>多态的例子可以参考练习2。</li><li>在一个设计良好的 OOP 程序中，大多数或所有方法都只与基类接口通信。这样的程序是可扩展的，因为可以从通用的基类继承出新的数据类型，从而新添加一些功能。</li><li>域没有多态。</li><li>如果一个方法是静态的，那么它的行为就不具有多态性。静态方法是与类，而不是与单个对象相关联的。</li><li>由于 final 方法是无法覆盖的，所以 private 也是无法覆盖的，因此没办法进行动态绑定。即只有非 private 方法可以覆盖，但是“覆盖”private 方法编译器不会报错，但运行结果往往与预期不符：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivateOverride</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"private func()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PrivateOverride privateOverride = <span class="keyword">new</span> Derived();</span><br><span class="line">        privateOverride.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">PrivateOverride</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123; <span class="comment">// 这里其实没有覆盖。</span></span><br><span class="line">        System.out.println(<span class="string">"Derived func()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// private func()</span></span><br></pre></td></tr></table></figure><h2 id="构造器和多态"><a href="#构造器和多态" class="headerlink" title="构造器和多态"></a>构造器和多态</h2><p><strong>构造器不具有多态性</strong>，它们实际上是 static 方法，只不过该 static 是隐式声明的。</p><h3 id="构造器的调用顺序"><a href="#构造器的调用顺序" class="headerlink" title="构造器的调用顺序"></a>构造器的调用顺序</h3><ul><li>基类的构造器总是在导出类的构造过程中调用，而且按照继承层次逐渐向上链接，以使每个基类的构造器都能得到调用。</li><li>在导出类的构造器主体中，如果没有明确指定调用某个基类构造器，它会默默地调用默认构造器。如果不存在默认构造器，编译器就会出错（如果某个类没有任何构造器，则编译器会给他添加一个默认构造器）</li></ul><p>构造器的调用顺序：</p><ol><li>调用基类构造器。</li><li>按照声明顺序调用成员的初始化方法。</li><li>调用导出类的构造器的主体。</li></ol><h3 id="继承与清理"><a href="#继承与清理" class="headerlink" title="继承与清理"></a>继承与清理</h3><p>Java 中通常不需要考虑清理的问题，垃圾回收机制会解决大部分问题，但是如果真的需要进行清理操作时，我们需要手动调用某个特定的函数进行清理操作。因为继承的原因，我们在覆盖基类的清理函数时，需要调用基类版本的清理函数。通常在导出类清理函数的末尾。同时如果成员对象也有需要清理的话，也需要在清理函数中调用该成员的清理函数。调用的原则就是：<strong>清理的顺序应该与初始化的顺序相同</strong>。</p><p>如果某些成员对象存在于其他一个或多个对象共享的情况下，我们不能简单的调用其清理函数，我们可以使用“引用计数”来跟踪访问着共享对象的对象数量（就是C++中的shared_ptr）。</p><h3 id="构造器内部的多态方法的行为："><a href="#构造器内部的多态方法的行为：" class="headerlink" title="构造器内部的多态方法的行为："></a>构造器内部的多态方法的行为：</h3><p>如果在一个构造器的内部调用正在构造的对象的某个动态绑定方法，会发生什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Glyph</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Glyph.draw()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Glyph() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Glyph() before draw()"</span>);</span><br><span class="line">        draw();</span><br><span class="line">        System.out.println(<span class="string">"Glyph() after draw()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoundGlyph</span> <span class="keyword">extends</span> <span class="title">Glyph</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> radius = <span class="number">1</span>;</span><br><span class="line">    RoundGlyph(<span class="keyword">int</span> r) &#123;</span><br><span class="line">        radius = r;</span><br><span class="line">        System.out.println(<span class="string">"RoundGlyph.RoundGlyph(), radius = "</span> + radius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"RoundGlyph.draw(), radius = "</span> + radius);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolyConstructors</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> RoundGlyph(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Glyph() before draw()</span></span><br><span class="line"><span class="comment">// RoundGlyph.draw(), radius = 0</span></span><br><span class="line"><span class="comment">// Glyph() after draw()</span></span><br><span class="line"><span class="comment">// RoundGlyph.RoundGlyph(), radius = 5</span></span><br></pre></td></tr></table></figure><p>从上面的输出可以看出，在基类中调用动态方法，的确会调用到对应导出类的方法，但是导出类的域却未完成初始化。</p><p>初始化实例的过程：</p><ol><li>在其他任何事物发生之前，将分配给对象的存储空间初始化成二进制的零</li><li>调用基类构造器</li><li>按声明顺序调用成员的初始化方法</li><li>调用导出类的构造器主题。</li></ol><p>在构造器内唯一能够安全调用的那些方法是基类中 final 方法（private 方法属于 final 方法）</p><h2 id="协变返回类型"><a href="#协变返回类型" class="headerlink" title="协变返回类型"></a>协变返回类型</h2><p>Java SE5 中添加了协变返回类型，它表示在导出类中的被覆盖方法可以返回基类方法的返回类型的某种导出类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grain</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Grain"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheat</span> <span class="keyword">extends</span> <span class="title">Grain</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Wheat"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mill</span> </span>&#123;</span><br><span class="line">    <span class="function">Grain <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Grain();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WheatMill</span> <span class="keyword">extends</span> <span class="title">Mill</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Wheat <span class="title">process</span><span class="params">()</span> </span>&#123; <span class="comment">// 关键在这里，原本返回类型应该是 Grain，而这里使用了 Grain 的导出类 Wheat</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Wheat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CovariantReturn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mill mill = <span class="keyword">new</span> Mill();</span><br><span class="line">        Grain grain = mill.process();</span><br><span class="line">        System.out.println(<span class="string">"grain = "</span> + grain);</span><br><span class="line">        mill = <span class="keyword">new</span> WheatMill();</span><br><span class="line">        grain = mill.process();</span><br><span class="line">        System.out.println(<span class="string">"grain = "</span> + grain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// grain = Grain</span></span><br><span class="line"><span class="comment">// grain = Wheat</span></span><br></pre></td></tr></table></figure><h2 id="用继承进行设计"><a href="#用继承进行设计" class="headerlink" title="用继承进行设计"></a>用继承进行设计</h2><p>我们应该首先选择“组合”，尤其是不能十分确定应该使用哪种方法时。组合不会强制我们的程序谁叫进入继承的层次结构。而且，组合更加灵活，他可以动态选择类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HappyActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HappyActor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SadActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SadActor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Actor actor = <span class="keyword">new</span> HappyActor();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor = <span class="keyword">new</span> SadActor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.act();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transmogrify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stage stage = <span class="keyword">new</span> Stage();</span><br><span class="line">        stage.performPlay();</span><br><span class="line">        stage.change();</span><br><span class="line">        stage.performPlay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// HappyActor</span></span><br><span class="line"><span class="comment">// SadActor</span></span><br></pre></td></tr></table></figure><p>我们通过在运行时将引用与不同的对象重新绑定起来，可以让我们在运行期间获得动态灵活性（也称为“状态模式”）。</p><p><strong>继承表示行为间的差异，字段表示状态上的变化</strong>。</p><h3 id="纯继承与扩展"><a href="#纯继承与扩展" class="headerlink" title="纯继承与扩展"></a>纯继承与扩展</h3><ul><li>is-a 关系（纯继承）：只覆盖在基类中已有的方法，不对其进行扩展<ul><li>导出类和基类有完全相同的接口。</li><li>只需要从导出类向上转型，永远不需要知道正在处理的对象的确切类型</li></ul></li><li>is-like-a 关系：对基类进行了扩展<ul><li>导出类接口中扩展部分不能被基类访问。</li></ul></li></ul><h3 id="向下转型与运行时类型识别"><a href="#向下转型与运行时类型识别" class="headerlink" title="向下转型与运行时类型识别"></a>向下转型与运行时类型识别</h3><p>在 Java 中，所有转型都会得到检查。即使我们只是进行一次普通的加括弧形式的类型转换，在进入运行期时仍然会对其进行检查，如果不是我们想要转换的类型，那么会返回一个 ClassCastException。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cycle run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unicycle</span> <span class="keyword">extends</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Unicycle run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">extends</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bicycle run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tricycle</span> <span class="keyword">extends</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Tricycle run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ride</span><span class="params">(Cycle c)</span> </span>&#123;</span><br><span class="line">        c.run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Unicycle unicycle = <span class="keyword">new</span> Unicycle();</span><br><span class="line">        Bicycle bicycle = <span class="keyword">new</span> Bicycle();</span><br><span class="line">        Tricycle tricycle = <span class="keyword">new</span> Tricycle();</span><br><span class="line"></span><br><span class="line">        unicycle.run();</span><br><span class="line">        bicycle.run();</span><br><span class="line">        tricycle.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Unicycle run</span></span><br><span class="line"><span class="comment">// Bicycle run</span></span><br><span class="line"><span class="comment">// Tricycle run</span></span><br></pre></td></tr></table></figure><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Circle draw"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Circle erase"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Square draw"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Square erase"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Triangle draw"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Triangle erase"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomShapeGenerator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (random.nextInt(<span class="number">3</span>)) &#123;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="keyword">new</span> Triangle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shapes</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RandomShapeGenerator randomShapeGenerator = <span class="keyword">new</span> RandomShapeGenerator();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shape[] shapes = <span class="keyword">new</span> Shape[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++) &#123;</span><br><span class="line">            shapes[i] = randomShapeGenerator.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Shape shape: shapes) &#123;</span><br><span class="line">            shape.draw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Triangle draw</span></span><br><span class="line"><span class="comment">// Triangle draw</span></span><br><span class="line"><span class="comment">// Square draw</span></span><br><span class="line"><span class="comment">// Triangle draw</span></span><br><span class="line"><span class="comment">// Square draw</span></span><br><span class="line"><span class="comment">// Triangle draw</span></span><br><span class="line"><span class="comment">// Square draw</span></span><br><span class="line"><span class="comment">// Triangle draw</span></span><br><span class="line"><span class="comment">// Circle draw</span></span><br></pre></td></tr></table></figure><h3 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Shape info"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使导出类没有覆盖它，但是由于继承的原因，导出类任然会有该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Circle draw"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Circle erase"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Circle info"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shapes</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RandomShapeGenerator randomShapeGenerator = <span class="keyword">new</span> RandomShapeGenerator();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shape[] shapes = <span class="keyword">new</span> Shape[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++) &#123;</span><br><span class="line">            shapes[i] = randomShapeGenerator.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Shape shape: shapes) &#123;</span><br><span class="line">            shape.info();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Shape info</span></span><br><span class="line"><span class="comment">// Shape info</span></span><br><span class="line"><span class="comment">// Circle info</span></span><br><span class="line"><span class="comment">// Circle info</span></span><br><span class="line"><span class="comment">// Shape info</span></span><br><span class="line"><span class="comment">// Shape info</span></span><br><span class="line"><span class="comment">// Shape info</span></span><br><span class="line"><span class="comment">// Shape info</span></span><br><span class="line"><span class="comment">// Circle info</span></span><br></pre></td></tr></table></figure><p>如果只有一个导出类Circle覆盖了该方法，只有在正式类型为Circle的Shape调用info时，才会调用到覆盖后的方法，而其余的则是调用到基类的方法。</p><h3 id="练习4"><a href="#练习4" class="headerlink" title="练习4"></a>练习4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Line draw"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Line erase"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shapes</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RandomShapeGenerator randomShapeGenerator = <span class="keyword">new</span> RandomShapeGenerator();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shape[] shapes = <span class="keyword">new</span> Shape[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++) &#123;</span><br><span class="line">            shapes[i] = randomShapeGenerator.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Shape shape: shapes) &#123;</span><br><span class="line">            shape.draw();</span><br><span class="line">        &#125;</span><br><span class="line">        shapes[<span class="number">0</span>] = <span class="keyword">new</span> Line();</span><br><span class="line">        shapes[<span class="number">0</span>].draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Shape info</span></span><br><span class="line"><span class="comment">//Shape info</span></span><br><span class="line"><span class="comment">//Circle info</span></span><br><span class="line"><span class="comment">//Circle info</span></span><br><span class="line"><span class="comment">//Shape info</span></span><br><span class="line"><span class="comment">//Shape info</span></span><br><span class="line"><span class="comment">//Shape info</span></span><br><span class="line"><span class="comment">//Shape info</span></span><br><span class="line"><span class="comment">//Circle info</span></span><br></pre></td></tr></table></figure><h3 id="练习5"><a href="#练习5" class="headerlink" title="练习5"></a>练习5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cycle run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">wheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unicycle</span> <span class="keyword">extends</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Unicycle run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">wheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">extends</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bicycle run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">wheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tricycle</span> <span class="keyword">extends</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Tricycle run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">wheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ride</span><span class="params">(Cycle c)</span> </span>&#123;</span><br><span class="line">        c.run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Unicycle unicycle = <span class="keyword">new</span> Unicycle();</span><br><span class="line">        Bicycle bicycle = <span class="keyword">new</span> Bicycle();</span><br><span class="line">        Tricycle tricycle = <span class="keyword">new</span> Tricycle();</span><br><span class="line"></span><br><span class="line">        unicycle.run();</span><br><span class="line">        bicycle.run();</span><br><span class="line">        tricycle.run();</span><br><span class="line"></span><br><span class="line">        Cycle[] cycles = <span class="keyword">new</span> Cycle[]&#123;unicycle, bicycle, tricycle&#125;;</span><br><span class="line">        <span class="keyword">for</span> (Cycle cycle: cycles) &#123;</span><br><span class="line">            System.out.println(<span class="string">"cycle.wheels() = "</span> + cycle.wheels());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Unicycle run</span></span><br><span class="line"><span class="comment">// Bicycle run</span></span><br><span class="line"><span class="comment">// Tricycle run</span></span><br><span class="line"><span class="comment">// cycle.wheels() = 1</span></span><br><span class="line"><span class="comment">// cycle.wheels() = 2</span></span><br><span class="line"><span class="comment">// cycle.wheels() = 3</span></span><br></pre></td></tr></table></figure><h3 id="练习6"><a href="#练习6" class="headerlink" title="练习6"></a>练习6</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Note &#123;</span><br><span class="line">    MIDDLE_C, C_SHARP, B_FLAT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">(Note n)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Instrument.play() n = "</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Instrument"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Adusting Instrument"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wind</span> <span class="keyword">extends</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">(Note n)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Wind.play() n = "</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Percussion</span> <span class="keyword">extends</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">(Note n)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Percussion.play() n = "</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Percussion"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Adjusting Percussion"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stringed</span> <span class="keyword">extends</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">(Note n)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Stringed.play() n = "</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Stringed"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Adjusting Stringed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Brass</span> <span class="keyword">extends</span> <span class="title">Wind</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">(Note n)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Brass.play() n = "</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Adjusting Brass"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woodwind</span> <span class="keyword">extends</span> <span class="title">Wind</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">(Note n)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Woodwind.play() n = "</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Woodwind"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Music3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tune</span><span class="params">(Instrument i)</span> </span>&#123;</span><br><span class="line">        i.play(Note.MIDDLE_C);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tuneAll</span><span class="params">(Instrument[] instruments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Instrument instrument: instruments) &#123;</span><br><span class="line">            tune(instrument);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Instrument[] instruments = &#123;</span><br><span class="line">                <span class="keyword">new</span> Wind(),</span><br><span class="line">                <span class="keyword">new</span> Percussion(),</span><br><span class="line">                <span class="keyword">new</span> Stringed(),</span><br><span class="line">                <span class="keyword">new</span> Brass(),</span><br><span class="line">                <span class="keyword">new</span> Woodwind(),</span><br><span class="line">        &#125;;</span><br><span class="line">        tuneAll(instruments);</span><br><span class="line">        <span class="keyword">for</span> (Instrument instrument: instruments) &#123;</span><br><span class="line">            System.out.println(instrument);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Wind.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Percussion.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Stringed.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Brass.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Woodwind.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Instrument</span></span><br><span class="line"><span class="comment">// Percussion</span></span><br><span class="line"><span class="comment">// Stringed</span></span><br><span class="line"><span class="comment">// Instrument</span></span><br><span class="line"><span class="comment">// Woodwind</span></span><br></pre></td></tr></table></figure><h3 id="练习7"><a href="#练习7" class="headerlink" title="练习7"></a>练习7</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Piano</span> <span class="keyword">extends</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">(Note n)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Piano.play() n = "</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Piano"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Adjusting Piano"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Music3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tune</span><span class="params">(Instrument i)</span> </span>&#123;</span><br><span class="line">        i.play(Note.MIDDLE_C);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tuneAll</span><span class="params">(Instrument[] instruments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Instrument instrument: instruments) &#123;</span><br><span class="line">            tune(instrument);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Instrument[] instruments = &#123;</span><br><span class="line">                <span class="keyword">new</span> Wind(),</span><br><span class="line">                <span class="keyword">new</span> Percussion(),</span><br><span class="line">                <span class="keyword">new</span> Stringed(),</span><br><span class="line">                <span class="keyword">new</span> Brass(),</span><br><span class="line">                <span class="keyword">new</span> Woodwind(),</span><br><span class="line">                <span class="keyword">new</span> Piano(),</span><br><span class="line">        &#125;;</span><br><span class="line">        tuneAll(instruments);</span><br><span class="line">        <span class="keyword">for</span> (Instrument instrument: instruments) &#123;</span><br><span class="line">            System.out.println(instrument);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Wind.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Percussion.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Stringed.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Brass.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Woodwind.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Piano.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Instrument</span></span><br><span class="line"><span class="comment">// Percussion</span></span><br><span class="line"><span class="comment">// Stringed</span></span><br><span class="line"><span class="comment">// Instrument</span></span><br><span class="line"><span class="comment">// Woodwind</span></span><br><span class="line"><span class="comment">// Piano</span></span><br></pre></td></tr></table></figure><h3 id="练习8"><a href="#练习8" class="headerlink" title="练习8"></a>练习8</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InstrumentGenerator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random(<span class="number">42</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Instrument <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (random.nextInt(<span class="number">6</span>)) &#123;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> <span class="keyword">new</span> Wind();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="keyword">new</span> Percussion();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="keyword">new</span> Stringed();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> <span class="keyword">new</span> Brass();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">return</span> <span class="keyword">new</span> Woodwind();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">return</span> <span class="keyword">new</span> Piano();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Music3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tune</span><span class="params">(Instrument i)</span> </span>&#123;</span><br><span class="line">        i.play(Note.MIDDLE_C);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tuneAll</span><span class="params">(Instrument[] instruments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Instrument instrument: instruments) &#123;</span><br><span class="line">            tune(instrument);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Instrument[] instruments = <span class="keyword">new</span> Instrument[<span class="number">10</span>];</span><br><span class="line">        InstrumentGenerator instrumentGenerator = <span class="keyword">new</span> InstrumentGenerator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            instruments[i] = instrumentGenerator.next();</span><br><span class="line">        &#125;</span><br><span class="line">        tuneAll(instruments);</span><br><span class="line">        <span class="keyword">for</span> (Instrument instrument: instruments) &#123;</span><br><span class="line">            System.out.println(instrument);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stringed.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Brass.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Wind.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Stringed.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Wind.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Percussion.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Piano.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Stringed.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Percussion.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Piano.play() n = MIDDLE_C</span></span><br><span class="line"><span class="comment">// Stringed</span></span><br><span class="line"><span class="comment">// Instrument</span></span><br><span class="line"><span class="comment">// Instrument</span></span><br><span class="line"><span class="comment">// Stringed</span></span><br><span class="line"><span class="comment">// Instrument</span></span><br><span class="line"><span class="comment">// Percussion</span></span><br><span class="line"><span class="comment">// Piano</span></span><br><span class="line"><span class="comment">// Stringed</span></span><br><span class="line"><span class="comment">// Percussion</span></span><br><span class="line"><span class="comment">// Piano</span></span><br></pre></td></tr></table></figure><h3 id="练习9"><a href="#练习9" class="headerlink" title="练习9"></a>练习9</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rodent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Rodent.eat()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rodent[] rodents = <span class="keyword">new</span> Rodent[] &#123;</span><br><span class="line">                <span class="keyword">new</span> Rodent(),</span><br><span class="line">                <span class="keyword">new</span> Mouse(),</span><br><span class="line">                <span class="keyword">new</span> Gerbil(),</span><br><span class="line">                <span class="keyword">new</span> Hamster(),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (Rodent rodent: rodents) &#123;</span><br><span class="line">            rodent.eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">Rodent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mouse.eat()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gerbil</span> <span class="keyword">extends</span> <span class="title">Rodent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Gerbil.eat()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hamster</span> <span class="keyword">extends</span> <span class="title">Rodent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hamster.eat()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Rodent.eat()</span></span><br><span class="line"><span class="comment">// Mouse.eat()</span></span><br><span class="line"><span class="comment">// Gerbil.eat()</span></span><br><span class="line"><span class="comment">// Hamster.eat()</span></span><br></pre></td></tr></table></figure><h3 id="练习10"><a href="#练习10" class="headerlink" title="练习10"></a>练习10</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        func2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Base"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex10</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Ex10"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Base base = <span class="keyword">new</span> Ex10();</span><br><span class="line">        base.func1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Ex10</span></span><br></pre></td></tr></table></figure><p>因为<code>func2</code>既不是static也不是final，所以他是动态绑定的，因此基类的 func1 中调用 func2 方法也是调用到导出类的 func2。</p><h3 id="练习11"><a href="#练习11" class="headerlink" title="练习11"></a>练习11</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meal</span> </span>&#123;</span><br><span class="line">    Meal() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Meal()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bread</span> </span>&#123;</span><br><span class="line">    Bread() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Bread()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cheese</span> </span>&#123;</span><br><span class="line">    Cheese() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Cheese()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lettuce</span> </span>&#123;</span><br><span class="line">    Lettuce() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Lettuce()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lunch</span> <span class="keyword">extends</span> <span class="title">Meal</span> </span>&#123;</span><br><span class="line">    Lunch() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Lunch()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PortableLunch</span> <span class="keyword">extends</span> <span class="title">Lunch</span> </span>&#123;</span><br><span class="line">    PortableLunch() &#123;</span><br><span class="line">        System.out.println(<span class="string">"PortableLunch()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pickle</span> </span>&#123;</span><br><span class="line">    Pickle() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Pickle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sandwich</span> <span class="keyword">extends</span> <span class="title">PortableLunch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Bread b = <span class="keyword">new</span> Bread();</span><br><span class="line">    <span class="keyword">private</span> Cheese c = <span class="keyword">new</span> Cheese();</span><br><span class="line">    <span class="keyword">private</span> Lettuce l = <span class="keyword">new</span> Lettuce();</span><br><span class="line">    <span class="keyword">private</span> Pickle p = <span class="keyword">new</span> Pickle();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sandwich</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Sandwich()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Sandwich();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习12"><a href="#练习12" class="headerlink" title="练习12"></a>练习12</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rodent</span> </span>&#123;</span><br><span class="line">    Rodent() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Rodent"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Rodent.eat()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rodent[] rodents = <span class="keyword">new</span> Rodent[] &#123;</span><br><span class="line">                <span class="keyword">new</span> Rodent(),</span><br><span class="line">                <span class="keyword">new</span> Mouse(),</span><br><span class="line">                <span class="keyword">new</span> Gerbil(),</span><br><span class="line">                <span class="keyword">new</span> Hamster(),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (Rodent rodent: rodents) &#123;</span><br><span class="line">            rodent.eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">Rodent</span> </span>&#123;</span><br><span class="line">    Mouse() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Mouse"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mouse.eat()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gerbil</span> <span class="keyword">extends</span> <span class="title">Rodent</span> </span>&#123;</span><br><span class="line">    Gerbil() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Gerbil"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Gerbil.eat()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hamster</span> <span class="keyword">extends</span> <span class="title">Rodent</span> </span>&#123;</span><br><span class="line">    Hamster() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Hamster"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hamster.eat()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习13"><a href="#练习13" class="headerlink" title="练习13"></a>练习13</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shared</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> refcount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Shared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Create "</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        refcount++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(--refcount == <span class="number">0</span>)</span><br><span class="line">            System.out.println(<span class="string">"Disposing "</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Shared&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"finalize()"</span>);</span><br><span class="line">        <span class="keyword">if</span> (refcount != <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"refcount != 0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.finalize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composing</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Shared shared;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Composing</span><span class="params">(Shared shared)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Creating "</span> + <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.shared = shared;</span><br><span class="line">        <span class="keyword">this</span>.shared.addRef();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"disposing "</span> + <span class="keyword">this</span>);</span><br><span class="line">        shared.dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Composing&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceCounting</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Shared shared = new Shared();</span></span><br><span class="line"><span class="comment">//        Composing[] composings = &#123;</span></span><br><span class="line"><span class="comment">//                new Composing(shared), new Composing(shared),</span></span><br><span class="line"><span class="comment">//                new Composing(shared), new Composing(shared),</span></span><br><span class="line"><span class="comment">//                new Composing(shared)</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        for (Composing composing: composings) &#123;</span></span><br><span class="line"><span class="comment">//            composing.dispose();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">new</span> Composing(<span class="keyword">new</span> Shared());</span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习14"><a href="#练习14" class="headerlink" title="练习14"></a>练习14</h3><h3 id="练习15"><a href="#练习15" class="headerlink" title="练习15"></a>练习15</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Glyph</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Glyph.draw()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Glyph() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Glyph() before draw()"</span>);</span><br><span class="line">        draw();</span><br><span class="line">        System.out.println(<span class="string">"Glyph() after draw()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoundGlyph</span> <span class="keyword">extends</span> <span class="title">Glyph</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> radius = <span class="number">1</span>;</span><br><span class="line">    RoundGlyph(<span class="keyword">int</span> r) &#123;</span><br><span class="line">        radius = r;</span><br><span class="line">        System.out.println(<span class="string">"RoundGlyph.RoundGlyph(), radius = "</span> + radius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"RoundGlyph.draw(), radius = "</span> + radius);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RectangularGlygh</span> <span class="keyword">extends</span> <span class="title">Glyph</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    RectangularGlygh(<span class="keyword">int</span> length) &#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">        System.out.println(<span class="string">"RectanguarGlygh length = "</span> + length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"RectanguarGlygh.draw() length = "</span> + length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolyConstructors</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> RectangularGlygh(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Glyph() before draw()</span></span><br><span class="line"><span class="comment">// RectanguarGlygh.draw() length = 0</span></span><br><span class="line"><span class="comment">// Glyph() after draw()</span></span><br><span class="line"><span class="comment">// RectanguarGlygh length = 10</span></span><br></pre></td></tr></table></figure><h3 id="练习16"><a href="#练习16" class="headerlink" title="练习16"></a>练习16</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Status</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatusA</span> <span class="keyword">extends</span> <span class="title">Status</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Status A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatusB</span> <span class="keyword">extends</span> <span class="title">Status</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Status B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatusC</span> <span class="keyword">extends</span> <span class="title">Status</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Status C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlterStatus</span> </span>&#123;</span><br><span class="line">    Status status = <span class="keyword">new</span> StatusA();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        status = <span class="keyword">new</span> StatusA();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        status = <span class="keyword">new</span> StatusB();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">C</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        status = <span class="keyword">new</span> StatusC();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        status.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Starship</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AlterStatus alterStatus = <span class="keyword">new</span> AlterStatus();</span><br><span class="line">        alterStatus.call();</span><br><span class="line">        alterStatus.B();</span><br><span class="line">        alterStatus.call();</span><br><span class="line">        alterStatus.C();</span><br><span class="line">        alterStatus.call();</span><br><span class="line">        alterStatus.A();</span><br><span class="line">        alterStatus.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Status A</span></span><br><span class="line"><span class="comment">// Status B</span></span><br><span class="line"><span class="comment">// Status C</span></span><br><span class="line"><span class="comment">// Status A</span></span><br></pre></td></tr></table></figure><h3 id="练习17"><a href="#练习17" class="headerlink" title="练习17"></a>练习17</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cycle run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">wheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unicycle</span> <span class="keyword">extends</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Unicycle run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">wheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">balance</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">extends</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bicycle run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">wheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">balance</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tricycle</span> <span class="keyword">extends</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Tricycle run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">wheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ride</span><span class="params">(Cycle c)</span> </span>&#123;</span><br><span class="line">        c.run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Cycle[] cycles = <span class="keyword">new</span> Cycle[]&#123;<span class="keyword">new</span> Unicycle(), <span class="keyword">new</span> Bicycle(), <span class="keyword">new</span> Tricycle()&#125;;</span><br><span class="line"><span class="comment">//        for(Cycle cycle: cycles) &#123;</span></span><br><span class="line"><span class="comment">//            cycle.balance(); // 无法调用</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        Unicycle unicycle = (Unicycle)cycles[<span class="number">0</span>];</span><br><span class="line">        Bicycle bicycle = (Bicycle)cycles[<span class="number">1</span>];</span><br><span class="line">        Tricycle tricycle = (Tricycle)cycles[<span class="number">2</span>];</span><br><span class="line">        </span><br><span class="line">        unicycle.balance();</span><br><span class="line">        bicycle.balance();</span><br><span class="line"><span class="comment">//        tricycle.balance(); //无法调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/categories/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
    
      <category term="Java" scheme="http://blog.codeand.fun/tags/Java/"/>
    
      <category term="阅读笔记" scheme="http://blog.codeand.fun/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
      <category term="后端" scheme="http://blog.codeand.fun/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>《 Java 编程思想》CH07 复用类</title>
    <link href="http://blog.codeand.fun/2020/02/15/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH07-%E5%A4%8D%E7%94%A8%E7%B1%BB/"/>
    <id>http://blog.codeand.fun/2020/02/15/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH07-%E5%A4%8D%E7%94%A8%E7%B1%BB/</id>
    <published>2020-02-15T14:58:12.000Z</published>
    <updated>2020-04-02T14:43:48.839Z</updated>
    
    <content type="html"><![CDATA[<p><strong>复用代码是 Java 众多引人注目的功能之一。</strong></p><p>Java 可以通过创建类来复用代码，要在使用类的时候不破坏现有代码，有两种方式：</p><ul><li>组合：在新的类中使用现有类的对象。</li><li>继承：按照现有类的类型来创建新类，无需改变现有类的形式，并为其添加新代码。</li></ul><h2 id="组合语法"><a href="#组合语法" class="headerlink" title="组合语法"></a>组合语法</h2><ul><li>使用组合技术只需要将对象引用置于新类中。</li><li>每个非基本类型的对象都有一个 <code>toString()</code> 方法，而且当编译器需要一个 String 而你传入一个对象时，<code>toString()</code> 会被调用。</li><li>类中的对象引用会被默认初始化为 null，如果你对其调用任何方法都会抛出异常，但是可以在不抛出异常的情况下，仍然可以打印一个 null 引用</li><li>类中对象引用的初始化位置：<ul><li>在定义对象的地方</li><li>在类的构造器中</li><li>惰性初始化，即在要使用该对象的地方进行初始化</li><li>实例初始化</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soap</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String s;</span><br><span class="line">Soap() &#123;</span><br><span class="line">System.out.println(<span class="string">"Soup()"</span>);</span><br><span class="line">s = <span class="string">"Constructed"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bath</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bath</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String s1 = <span class="string">"happy"</span>,  <span class="comment">// 在定义处初始化</span></span><br><span class="line">s2; </span><br><span class="line"><span class="keyword">private</span> Soap soap;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Bath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Inside Bath()"</span>);</span><br><span class="line">soap = <span class="keyword">new</span> Soap(); <span class="comment">// 在构造函数中初四花</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">s2 = <span class="string">"Joy"</span>; <span class="comment">// 惰性初始化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">2</span>; <span class="comment">// 实例初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Bath b = <span class="keyword">new</span> Bath();</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承语法"><a href="#继承语法" class="headerlink" title="继承语法"></a>继承语法</h2><ul><li>继承是 OOP 语言和 Java 语言不可缺少的部分，当创建一个类时，总是在继承，即使没有显式继承某个类，也会隐式地从 Object 类中继承。</li><li>继承由关键词 <code>extends</code> 指定，其形式如<code>class Detergent extends Cleanser{}</code>，基类的所有方法和成员都会自动导入到导出类中。</li><li>可以为每个类都创建一个 main 方法，这样可以使得每个类的单元测试变得简便。即使某个类只有包访问权限，其<code>public main</code>也可以通过 <code>java className</code>的方式访问到</li><li>为了继承，一般是将所有的数据成员都指定为 private，将所有的方法指定为 public。</li><li>我们对继承来的方法进行重写，重写之后可以通过 <code>super</code> 关键词访问基类版本的方法，如<code>super.func()</code>;</li><li>Java 会自动在导出类的构造器中插入对基类构造器的调用，其总是在导出类构造器执行之前，即使是在定义处初始化的语句也会在基类构造器执行之后执行。</li><li>即使没有为导出类创建构造器，编译器也会在默认构造器中调用基类的构造器</li><li>如果没有默认的基类构造器，或者想要调用一个带有参数的基类构造器，就必须使用 super 关键词显式调用基类构造器，<strong>调用基类构造器必须是在你导出类构造器的第一条语句</strong>。</li></ul><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>代理是指，我们将一个成员对象置于要构造的类中（像组合），但与此同时我们在新类中暴露该成员对象的所有或部分方法（想继承）。</p><p>IDEA自动创建代理的过程：</p><ul><li>先在代理类中声明要代理的成员。</li><li><code>Alt + Insert</code>快捷键，选中 <code>Delegation</code></li><li>选中要代理的函数即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpaceShipControls</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">back</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">turboBoost</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpaceShipDelegation</span> </span>&#123;</span><br><span class="line">    SpaceShipControls spaceShipControls = <span class="keyword">new</span> SpaceShipControls();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;</span><br><span class="line">        spaceShipControls.up(velocity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;</span><br><span class="line">        spaceShipControls.down(velocity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;</span><br><span class="line">        spaceShipControls.left(velocity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;</span><br><span class="line">        spaceShipControls.right(velocity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">back</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;</span><br><span class="line">        spaceShipControls.back(velocity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turboBoost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        spaceShipControls.turboBoost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpaceShipDelegation spaceShipDelegation = <span class="keyword">new</span> SpaceShipDelegation();</span><br><span class="line">        spaceShipDelegation.left(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结合使用组合继承"><a href="#结合使用组合继承" class="headerlink" title="结合使用组合继承"></a>结合使用组合继承</h2><ul><li>可以结合组合和继承来创建复杂的类</li><li>编译器会强制你去初始化基类，并且要求在构造器最开始出就要这么做，但是它不会要求你对成员对象进行初始化，因此需要自己注意。</li><li>Java 中没有 C++ 中的析构函数，就像之前所说的一样，如果我们的类的确需要做一些类似的工作（如关闭文件），我们需要自己实现一个方法来实现，而当涉及到继承时，我们要确保以正确的顺序调用该函数，推荐和C++中析构函数的执行顺序一样编写该函数，即先清理导出类本身，再调用基类的清理函数。</li><li>清理函数需要放在 finally 子句中，以防异常的出现，导致清理函数未被执行，可参考练习12</li><li>如果 Java 的基类拥有某个已经被多次重载的方法名称时，在导出类中重新定义该方法的名称，不会屏蔽其在基类中的任何版本。这意味着，在导出类中，重载和重新定义（重写）容易混淆在一起，如果不看基类的定义是很难分辨某个方法是否正确的被重新定义了。我们可以使用<code>@Override</code>注解来标识某个方法我们希望其是重写而不是重载，如果一不小心重载了，则会出现编译错误来提醒我们。</li></ul><h2 id="在组合与继承之间选择"><a href="#在组合与继承之间选择" class="headerlink" title="在组合与继承之间选择"></a>在组合与继承之间选择</h2><ul><li>组合和继承都允许在新的类中放置子对象，组合是显式地这样做，而继承则是隐式地这样做。</li><li>组合技术通常用于想在新类中使用现有类的功能而非它的接口这种情况。有时，允许类的用户直接访问新类中组合成分是有意义的。</li><li>在继承时，使用某个现有类，开发一个它的特殊版本。通常，这意味着你在使用一个通用类，并为了某种特殊需要而将其特殊化。</li></ul><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><ul><li>“为新的类提供方法”不是继承中最重要的部分，其重要的方面是用来表现新类和基类之间的关系。简单的说，我们可以认为“导出类是基类的一种类型”，即可以把导出类当成基类来使用</li><li>由于导出类转换为基类在继承图上是向上移动的，因为我们将其成为“向上转型”</li><li>向上转型是从一个较为专用的类向较为通用的类转变</li><li>虽然在教授OOP的过程中多次强调继承，但是我们应该慎用继承。判断是否要使用的继承的一个简单方法就是，判断我们是否要进行向上转型，如果要进行向上转型，则用继承，反之，则用组合。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tune</span><span class="params">(Instrument i)</span> </span>&#123;</span><br><span class="line">        i.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wind</span> <span class="keyword">extends</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Wind wind = <span class="keyword">new</span> Wind();</span><br><span class="line">        Instrument.tune(wind); <span class="comment">// 传递参数时，用了向上转型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h2><p>final 关键词的含义通常指“无法改变的”，使用这个关键词通常是因为设计和效率的原因。，final 可以用在数据、方法和类上。</p><h3 id="final-数据"><a href="#final-数据" class="headerlink" title="final 数据"></a>final 数据</h3><ul><li>数据的恒定不变分为两种情况：编译时常量和在运行时初始化并并无法的改变的值。</li><li>在 Java 中，这类常量必须是基本数据类型，并且用关键词 final 表示，并在该常量定义时对其初始化，如<code>final int value = 1</code>。通常，编译时常量还是一个<code>static</code>数据，即<code>static final int VALUE_ONE = 1</code>。</li><li>编译器常量的命名规则是：全用大写字母，单词与单词之间用<code>_</code>隔开</li><li>即使一个变量是<code>final</code>,我们也无法确定其是编译时常量，因为初始化没有要求是字面量，即初始化可以通过调用函数实现，如<code>final int value = rand.nextInt(20)</code>。</li><li>同时一个<code>final</code>数值，如果其是<code>static</code>的，那么它可能是在类导入时初始化的，而他不是<code>static</code>的话，它是在实例化时初始化的。</li><li>对于基本变量，final 使数值恒定不变，但是对于对象引用，其只是要求对象引用不变，即不指向新的对象，而对象本身是可以被修改的。</li><li>Java 允许“空白 final”，即被声明为 final 但是又没有给定初值的域，虽然可以在定义时不给定初值，按时编译器会保证，final 域在使用前都必须被初始化，即如果没有在定义处给定 final 域的初值的话，就必须在每个构造器中对该 final 域进行赋值。</li><li>Java 允许在参数列表中以声明的方式将参数指明为 final，其含义为，在该函数中无法修改该变量：<ul><li>参数类型为基本类型：可以读参数，但是不能修改</li><li>参数类型为对象类型：无法修改引用</li></ul></li></ul><h3 id="final-方法"><a href="#final-方法" class="headerlink" title="final 方法"></a>final 方法</h3><ul><li>可以将一个方法定义成 final，这样可以防止任何继承类修改它的含义（即导出类无法覆盖实现）</li><li>在 Java 的早期实现中，对 final 方法的调用会被转为内嵌调用（C++ 中的 inline），但是现在不需要用这样的方式来优化代码了</li><li>类中的所有 private 方法都被隐式的指定为 final</li><li>“覆盖”只有在方法是基类的接口的一部分时才会出现，即必须能将一个对象向上转型为它的基本类型并调用相同的方法，如果一个方法是 private，那么它就不是接口的一部分。</li></ul><h3 id="final-类"><a href="#final-类" class="headerlink" title="final 类"></a>final 类</h3><p>当将一个类的整体定义为 final 时，就表明该类无法被继承，同时隐式地将所有方法都定义为 final。</p><h2 id="初始化及类的加载"><a href="#初始化及类的加载" class="headerlink" title="初始化及类的加载"></a>初始化及类的加载</h2><ul><li>每个类的编译代码都存在与他自己独立的文件中。该文件只有在需要使用程序代码的时候才会被加载。</li><li>一般来说，只有在“类首次使用才加载”，即加载发生于第一次创建类的对象或第一次使用类中的静态域或静态方法。</li><li>在加载导出类是，Java 编译器会注意到它继承于某个基类，因此他会先去加载该基类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch07;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Insert</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i =  <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> j;</span><br><span class="line">    Insert() &#123;</span><br><span class="line">        System.out.println(<span class="string">"i = "</span> + i + <span class="string">" j = "</span> + j);</span><br><span class="line">        j = <span class="number">39</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x1 = printInit(<span class="string">"static Insert.x1 init"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">printInit</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">47</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Beetle</span> <span class="keyword">extends</span> <span class="title">Insert</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> k = printInit(<span class="string">"Beetle.k init"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Beetle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"k = "</span> + k);</span><br><span class="line">        System.out.println(<span class="string">"j = "</span> + j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x2 = printInit(<span class="string">"static Beetle.x2 init"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Beetle constructor"</span>);</span><br><span class="line">        <span class="keyword">new</span> Beetle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    static Insert.x1 init</span></span><br><span class="line"><span class="comment">//    static Beetle.x2 init</span></span><br><span class="line"><span class="comment">//    Beetle constructor</span></span><br><span class="line"><span class="comment">//    i = 9 j = 0</span></span><br><span class="line"><span class="comment">//    Beetle.k init</span></span><br><span class="line"><span class="comment">//    k = 47</span></span><br><span class="line"><span class="comment">//    j = 39</span></span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Demo"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"toString()"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Ex1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex1</span> </span>&#123;</span><br><span class="line">Demo demo;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (demo == <span class="keyword">null</span>) &#123;</span><br><span class="line">demo = <span class="keyword">new</span> Demo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> demo.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Ex1 ex1 = <span class="keyword">new</span> Ex1();</span><br><span class="line">System.out.println(ex1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cleanser</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String s = <span class="string">"Cleanser"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">s += a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dilute</span><span class="params">()</span> </span>&#123; append(<span class="string">" dilute()"</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span> </span>&#123; append(<span class="string">" apply()"</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrub</span><span class="params">()</span> </span>&#123; append(<span class="string">" scrub()"</span>); &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Cleanser cleanser = <span class="keyword">new</span> Cleanser();</span><br><span class="line">cleanser.dilute(); cleanser.apply(); cleanser.scrub();</span><br><span class="line">System.out.println(cleanser);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Detergent</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Detergent</span> <span class="keyword">extends</span> <span class="title">Cleanser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">append(<span class="string">" Detergent.scrub()"</span>);</span><br><span class="line"><span class="keyword">super</span>.scrub();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foam</span><span class="params">()</span> </span>&#123; append(<span class="string">" foam()"</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Detergent detergent = <span class="keyword">new</span> Detergent();</span><br><span class="line">detergent.dilute();</span><br><span class="line">detergent.apply();</span><br><span class="line">detergent.scrub();</span><br><span class="line">detergent.foam();</span><br><span class="line">System.out.println(detergent);</span><br><span class="line">Cleanser.main(args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewDetergent</span> <span class="keyword">extends</span> <span class="title">Detergent</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">append(<span class="string">"NewDetergent"</span>);</span><br><span class="line"><span class="keyword">super</span>.scrub();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sterilize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">append(<span class="string">"sterilize"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">NewDetergent newDetergent = <span class="keyword">new</span> NewDetergent();</span><br><span class="line">newDetergent.dilute();</span><br><span class="line">newDetergent.apply();</span><br><span class="line">newDetergent.scrub();</span><br><span class="line">newDetergent.foam();</span><br><span class="line">newDetergent.sterilize();</span><br><span class="line">System.out.println(newDetergent);</span><br><span class="line">Detergent.main(args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cleanser dilute() apply()NewDetergent Detergent.scrub() scrub() foam()sterilize</span></span><br><span class="line"><span class="comment">// Cleanser dilute() apply() Detergent.scrub() scrub() foam()</span></span><br><span class="line"><span class="comment">// Cleanser dilute() apply() scrub()</span></span><br></pre></td></tr></table></figure><h3 id="练习3-amp-练习4"><a href="#练习3-amp-练习4" class="headerlink" title="练习3 &amp; 练习4"></a>练习3 &amp; 练习4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Art</span> </span>&#123;</span><br><span class="line">Art() &#123;</span><br><span class="line">System.out.println(<span class="string">"Art"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Art</span> </span>&#123;</span><br><span class="line">Drawing() &#123;</span><br><span class="line">System.out.println(<span class="string">"Drawing"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cartoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cartoon</span> <span class="keyword">extends</span> <span class="title">Drawing</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// public Cartoon() &#123;</span></span><br><span class="line"><span class="comment">// System.out.println("Cartoon");</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Cartoon();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Art</span></span><br><span class="line"><span class="comment">// Drawing</span></span><br></pre></td></tr></table></figure><h3 id="练习5"><a href="#练习5" class="headerlink" title="练习5"></a>练习5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">A() &#123;</span><br><span class="line">System.out.println(<span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">B() &#123;</span><br><span class="line">System.out.println(<span class="string">"B"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> C();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A</span></span><br><span class="line"><span class="comment">// B</span></span><br></pre></td></tr></table></figure><h3 id="练习6"><a href="#练习6" class="headerlink" title="练习6"></a>练习6</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">Game(<span class="keyword">int</span> i) &#123;</span><br><span class="line">System.out.println(<span class="string">"Game"</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoardGame</span> <span class="keyword">extends</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">BoardGame(<span class="keyword">int</span> i) &#123;</span><br><span class="line"><span class="keyword">super</span>(i);</span><br><span class="line">System.out.println(<span class="string">"BoardGame"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Chess</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chess</span> <span class="keyword">extends</span> <span class="title">BoardGame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Chess() &#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="number">11</span>); <span class="comment">// 去掉这条语句，会报编译错误</span></span><br><span class="line">System.out.println(<span class="string">"Chess"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Chess();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习7"><a href="#练习7" class="headerlink" title="练习7"></a>练习7</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">A(<span class="keyword">int</span> i) &#123;</span><br><span class="line">System.out.println(<span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">B(<span class="keyword">int</span> i) &#123;</span><br><span class="line">System.out.println(<span class="string">"B"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">B b = <span class="keyword">new</span> B(<span class="number">1</span>);</span><br><span class="line">C() &#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> C();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习8"><a href="#练习8" class="headerlink" title="练习8"></a>练习8</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">Game(<span class="keyword">int</span> i) &#123;</span><br><span class="line">System.out.println(<span class="string">"Game"</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoardGame</span> <span class="keyword">extends</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">BoardGame() &#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"BoardGame Default"</span>);</span><br><span class="line">&#125;</span><br><span class="line">BoardGame(<span class="keyword">int</span> i) &#123;</span><br><span class="line"><span class="keyword">super</span>(i);</span><br><span class="line">System.out.println(<span class="string">"BoardGame"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习9"><a href="#练习9" class="headerlink" title="练习9"></a>练习9</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component1</span> </span>&#123;</span><br><span class="line">Component1() &#123;</span><br><span class="line">System.out.println(<span class="string">"Component1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component2</span> </span>&#123;</span><br><span class="line">Component2() &#123;</span><br><span class="line">System.out.println(<span class="string">"Component2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component3</span> </span>&#123;</span><br><span class="line">Component3() &#123;</span><br><span class="line">System.out.println(<span class="string">"Component3"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span> </span>&#123;</span><br><span class="line">Component1 c1 = <span class="keyword">new</span> Component1();</span><br><span class="line">Component2 c2 = <span class="keyword">new</span> Component2();</span><br><span class="line">Component3 c3 = <span class="keyword">new</span> Component3();</span><br><span class="line">Root() &#123;</span><br><span class="line">System.out.println(<span class="string">"Root"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stem</span> <span class="keyword">extends</span> <span class="title">Root</span> </span>&#123;</span><br><span class="line">Stem() &#123;</span><br><span class="line">System.out.println(<span class="string">"Stem"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Stem();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Component1</span></span><br><span class="line"><span class="comment">// Component2</span></span><br><span class="line"><span class="comment">// Component3</span></span><br><span class="line"><span class="comment">// Root</span></span><br><span class="line"><span class="comment">// Stem</span></span><br></pre></td></tr></table></figure><h3 id="练习10"><a href="#练习10" class="headerlink" title="练习10"></a>练习10</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component1</span> </span>&#123;</span><br><span class="line">Component1(<span class="keyword">int</span> i) &#123;</span><br><span class="line">System.out.println(<span class="string">"Component1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component2</span> </span>&#123;</span><br><span class="line">Component2(<span class="keyword">int</span> i) &#123;</span><br><span class="line">System.out.println(<span class="string">"Component2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component3</span> </span>&#123;</span><br><span class="line">Component3(<span class="keyword">int</span> i) &#123;</span><br><span class="line">System.out.println(<span class="string">"Component3"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span> </span>&#123;</span><br><span class="line">Component1 c1 = <span class="keyword">new</span> Component1(<span class="number">1</span>);</span><br><span class="line">Component2 c2 = <span class="keyword">new</span> Component2(<span class="number">2</span>);</span><br><span class="line">Component3 c3 = <span class="keyword">new</span> Component3(<span class="number">3</span>);</span><br><span class="line">Root(<span class="keyword">int</span> i) &#123;</span><br><span class="line">System.out.println(<span class="string">"Root"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stem</span> <span class="keyword">extends</span> <span class="title">Root</span> </span>&#123;</span><br><span class="line">Stem(<span class="keyword">int</span> j) &#123;</span><br><span class="line"><span class="keyword">super</span>(j);</span><br><span class="line">System.out.println(<span class="string">"Stem"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Stem(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习11"><a href="#练习11" class="headerlink" title="练习11"></a>练习11</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetergentDelegation</span> </span>&#123;</span><br><span class="line">Detergent detergent = <span class="keyword">new</span> Detergent();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">detergent.append(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dilute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">detergent.dilute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">detergent.apply();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">detergent.scrub();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">detergent.foam();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Detergent.main(args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习12"><a href="#练习12" class="headerlink" title="练习12"></a>练习12</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch07;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component1</span> </span>&#123;</span><br><span class="line">Component1(<span class="keyword">int</span> i) &#123;</span><br><span class="line">System.out.println(<span class="string">"Component1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Component1 dispose"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component2</span> </span>&#123;</span><br><span class="line">Component2(<span class="keyword">int</span> i) &#123;</span><br><span class="line">System.out.println(<span class="string">"Component2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Component2 dispose"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component3</span> </span>&#123;</span><br><span class="line">Component3(<span class="keyword">int</span> i) &#123;</span><br><span class="line">System.out.println(<span class="string">"Component3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Component3 dispose"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span> </span>&#123;</span><br><span class="line">Component1 c1 = <span class="keyword">new</span> Component1(<span class="number">1</span>);</span><br><span class="line">Component2 c2 = <span class="keyword">new</span> Component2(<span class="number">2</span>);</span><br><span class="line">Component3 c3 = <span class="keyword">new</span> Component3(<span class="number">3</span>);</span><br><span class="line">Root(<span class="keyword">int</span> i) &#123;</span><br><span class="line">System.out.println(<span class="string">"Root"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"root dispose"</span>);</span><br><span class="line">c1.dispose();</span><br><span class="line">c2.dispose();</span><br><span class="line">c3.dispose();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stem</span> <span class="keyword">extends</span> <span class="title">Root</span> </span>&#123;</span><br><span class="line">Stem(<span class="keyword">int</span> j) &#123;</span><br><span class="line"><span class="keyword">super</span>(j);</span><br><span class="line">System.out.println(<span class="string">"Stem"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Stem dispose"</span>);</span><br><span class="line"><span class="keyword">super</span>.dispose();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stem stem = <span class="keyword">new</span> Stem(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">stem.dispose();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Component1</span></span><br><span class="line"><span class="comment">// Component2</span></span><br><span class="line"><span class="comment">// Component3</span></span><br><span class="line"><span class="comment">// Root</span></span><br><span class="line"><span class="comment">// Stem</span></span><br><span class="line"><span class="comment">// Stem dispose</span></span><br><span class="line"><span class="comment">// root dispose</span></span><br><span class="line"><span class="comment">// Component1 dispose</span></span><br><span class="line"><span class="comment">// Component2 dispose</span></span><br><span class="line"><span class="comment">// Component3 dispose</span></span><br></pre></td></tr></table></figure><h3 id="练习13"><a href="#练习13" class="headerlink" title="练习13"></a>练习13</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plate</span> </span>&#123;</span><br><span class="line">    Plate(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Plate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"func int "</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"func double "</span> + d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"func string "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DinnerPlate</span> <span class="keyword">extends</span> <span class="title">Plate</span> </span>&#123;</span><br><span class="line">    DinnerPlate(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        <span class="keyword">super</span>(i);</span><br><span class="line">        System.out.println(<span class="string">"DinnerPlate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"func char "</span> + c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DinnerPlate dinnerPlate = <span class="keyword">new</span> DinnerPlate(<span class="number">1</span>);</span><br><span class="line">        dinnerPlate.func(<span class="string">'c'</span>);</span><br><span class="line">        dinnerPlate.func(<span class="string">"hello"</span>);</span><br><span class="line">        dinnerPlate.func(<span class="number">1</span>);</span><br><span class="line">        dinnerPlate.func(<span class="number">1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Plate</span></span><br><span class="line"><span class="comment">// DinnerPlate</span></span><br><span class="line"><span class="comment">// func char c</span></span><br><span class="line"><span class="comment">// func string hello</span></span><br><span class="line"><span class="comment">// func int 1</span></span><br><span class="line"><span class="comment">// func double 1.0</span></span><br></pre></td></tr></table></figure><h3 id="练习14"><a href="#练习14" class="headerlink" title="练习14"></a>练习14</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch07;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rev</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inflate</span><span class="params">(<span class="keyword">int</span> psi)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollup</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rolldown</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Door</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Window window = <span class="keyword">new</span> Window();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Engine engine = <span class="keyword">new</span> Engine();</span><br><span class="line">    <span class="keyword">public</span> Wheel[] wheels = <span class="keyword">new</span> Wheel[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">public</span> Door left = <span class="keyword">new</span> Door(), right = <span class="keyword">new</span> Door();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            wheels[i] = <span class="keyword">new</span> Wheel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        car.left.window.rollup();</span><br><span class="line">        car.right.window.rolldown();</span><br><span class="line">        car.wheels[<span class="number">0</span>].inflate(<span class="number">72</span>);</span><br><span class="line">        car.engine.service();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习15"><a href="#练习15" class="headerlink" title="练习15"></a>练习15</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch07;</span><br><span class="line"><span class="keyword">import</span> com.company.ch05.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex15</span> <span class="keyword">extends</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ex15 ex15 = <span class="keyword">new</span> Ex15();</span><br><span class="line">        ex15.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习16"><a href="#练习16" class="headerlink" title="练习16"></a>练习16</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Amphibian</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Amphibian amphibian)</span> </span>&#123;</span><br><span class="line">        amphibian.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Frog</span> <span class="keyword">extends</span> <span class="title">Amphibian</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frog frog = <span class="keyword">new</span> Frog();</span><br><span class="line">        Amphibian.test(frog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习17"><a href="#练习17" class="headerlink" title="练习17"></a>练习17</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Amphibian</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Amphibian func"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Amphibian amphibian)</span> </span>&#123;</span><br><span class="line">        amphibian.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Frog</span> <span class="keyword">extends</span> <span class="title">Amphibian</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Frog func"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frog frog = <span class="keyword">new</span> Frog();</span><br><span class="line">        Amphibian.test(frog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Frog func</span></span><br></pre></td></tr></table></figure><h3 id="练习18"><a href="#练习18" class="headerlink" title="练习18"></a>练习18</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex18</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> i = random.nextInt(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> j = random.nextInt(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ex18 ex18 = <span class="keyword">new</span> Ex18();</span><br><span class="line">        System.out.println(<span class="string">"ex18.i = "</span> + ex18.i);</span><br><span class="line">        System.out.println(<span class="string">"ex18.j = "</span> + ex18.j);</span><br><span class="line">        Ex18 ex181 = <span class="keyword">new</span> Ex18();</span><br><span class="line">        System.out.println(<span class="string">"ex181.i = "</span> + ex181.i);</span><br><span class="line">        System.out.println(<span class="string">"ex181.j = "</span> + ex181.j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ex18.i = 8</span></span><br><span class="line"><span class="comment">// ex18.j = 6</span></span><br><span class="line"><span class="comment">// ex181.i = 4</span></span><br><span class="line"><span class="comment">// ex181.j = 6</span></span><br></pre></td></tr></table></figure><h3 id="练习19"><a href="#练习19" class="headerlink" title="练习19"></a>练习19</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex19</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> k;</span><br><span class="line">    Ex19() &#123;</span><br><span class="line">        k = <span class="number">1</span>; <span class="comment">// 必须赋值</span></span><br><span class="line">        <span class="comment">// k = 2; // 会报错</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ex19 ex19 = <span class="keyword">new</span> Ex19();</span><br><span class="line">        <span class="comment">// ex19.k = 1; // 会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习20"><a href="#练习20" class="headerlink" title="练习20"></a>练习20</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch07;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithFinal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"WithFinal.f()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"WithFinal.g()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverridingPrivate</span> <span class="keyword">extends</span> <span class="title">WithFinal</span> </span>&#123;</span><br><span class="line"><span class="comment">//    @Override //加上注解后编译错误</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"OverridingPrivate.f()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    @Override //加上注解后编译错误</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"OverridingPrivate.g()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverridingPrivate2</span> <span class="keyword">extends</span> <span class="title">OverridingPrivate</span> </span>&#123;</span><br><span class="line"><span class="comment">//    @Override //加上注解后编译错误</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"OverridingPrivate2.f()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    @Override //加上注解后编译错误</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"OverridingPrivate2.g()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalOverridingIllusion</span> <span class="keyword">extends</span> <span class="title">OverridingPrivate2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OverridingPrivate2 overridingPrivate2 = <span class="keyword">new</span> OverridingPrivate2();</span><br><span class="line">        overridingPrivate2.f();</span><br><span class="line">        overridingPrivate2.g();</span><br><span class="line"></span><br><span class="line">        OverridingPrivate overridingPrivate = overridingPrivate2;</span><br><span class="line"><span class="comment">//        overridingPrivate.f(); 无法调用</span></span><br><span class="line"><span class="comment">//        overridingPrivate.g();</span></span><br><span class="line">        WithFinal withFinal = overridingPrivate;</span><br><span class="line"><span class="comment">//        withFinal.f(); 无法调用</span></span><br><span class="line"><span class="comment">//        withFinal.g();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习21"><a href="#练习21" class="headerlink" title="练习21"></a>练习21</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch07;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Final</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex21</span> <span class="keyword">extends</span> <span class="title">Final</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// 编译出错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习22"><a href="#练习22" class="headerlink" title="练习22"></a>练习22</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalClass</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex22</span> <span class="keyword">extends</span> <span class="title">FinalClass</span> </span>&#123; <span class="comment">//编译出错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习23"><a href="#练习23" class="headerlink" title="练习23"></a>练习23</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Insert</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i =  <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> j;</span><br><span class="line">    Insert() &#123;</span><br><span class="line">        System.out.println(<span class="string">"i = "</span> + i + <span class="string">" j = "</span> + j);</span><br><span class="line">        j = <span class="number">39</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x1 = printInit(<span class="string">"static Insert.x1 init"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">printInit</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">47</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Beetle</span> <span class="keyword">extends</span> <span class="title">Insert</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> k = printInit(<span class="string">"Beetle.k init"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Beetle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"k = "</span> + k);</span><br><span class="line">        System.out.println(<span class="string">"j = "</span> + j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x2 = printInit(<span class="string">"static Beetle.x2 init"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> x3 = <span class="number">3</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Beetle constructor"</span>);</span><br><span class="line">        <span class="keyword">new</span> Beetle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ex23</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Beetle();</span><br><span class="line"><span class="comment">//        static Insert.x1 init</span></span><br><span class="line"><span class="comment">//        static Beetle.x2 init</span></span><br><span class="line"><span class="comment">//        i = 9 j = 0</span></span><br><span class="line"><span class="comment">//        Beetle.k init</span></span><br><span class="line"><span class="comment">//        k = 47</span></span><br><span class="line"><span class="comment">//        j = 39</span></span><br><span class="line">        <span class="comment">// or</span></span><br><span class="line">        <span class="comment">// System.out.println(Beetle.x3);</span></span><br><span class="line"><span class="comment">//        static Insert.x1 init</span></span><br><span class="line"><span class="comment">//        static Beetle.x2 init</span></span><br><span class="line"><span class="comment">//        3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习24"><a href="#练习24" class="headerlink" title="练习24"></a>练习24</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Insert</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i =  <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> j;</span><br><span class="line">    Insert() &#123;</span><br><span class="line">        System.out.println(<span class="string">"i = "</span> + i + <span class="string">" j = "</span> + j);</span><br><span class="line">        j = <span class="number">39</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x1 = printInit(<span class="string">"static Insert.x1 init"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">printInit</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">47</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Beetle</span> <span class="keyword">extends</span> <span class="title">Insert</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> k = printInit(<span class="string">"Beetle.k init"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Beetle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"k = "</span> + k);</span><br><span class="line">        System.out.println(<span class="string">"j = "</span> + j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x2 = printInit(<span class="string">"static Beetle.x2 init"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> x3 = <span class="number">3</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Beetle constructor"</span>);</span><br><span class="line">        <span class="keyword">new</span> Beetle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ex24</span> <span class="keyword">extends</span> <span class="title">Beetle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Ex24();</span><br><span class="line"><span class="comment">//        static Insert.x1 init</span></span><br><span class="line"><span class="comment">//        static Beetle.x2 init</span></span><br><span class="line"><span class="comment">//        i = 9 j = 0</span></span><br><span class="line"><span class="comment">//        Beetle.k init</span></span><br><span class="line"><span class="comment">//        k = 47</span></span><br><span class="line"><span class="comment">//        j = 39</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>调用 Ex24 的main函数（静态方法），准备加载 Ex24，但是发现其继承与 Beetle</li><li>准备加载 Beetle，但是发现其继承与 Insert，因此先加载 Insert</li><li>Insert 中的静态数据先初始化，所以会输出<code>static Insert.x1 init</code></li><li>Insert 加载并初始化完后，加载 Beetle 并对静态数据进行初始化，所以会输出<code>static Beetle.x2 init</code></li><li>然后加载 Ex24，加载过程完成，调用 main 函数</li><li><code>new Ex24</code>时，实例化的顺序为 <code>Insert -&gt; Beetle -&gt; Ex24</code></li><li>所以先输出 Insert 构造函数中的 <code>i = 9 j = 0</code>，之所以 j 为0，是因为int默认值为0</li><li>然后在实例化 Beetle 时，先会执行 实例初始化，即<code>private int k = printInit(&quot;Beetle.k init&quot;);</code></li><li>最后才是 Beetle 的构造函数。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/categories/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
    
      <category term="Java" scheme="http://blog.codeand.fun/tags/Java/"/>
    
      <category term="阅读笔记" scheme="http://blog.codeand.fun/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
      <category term="后端" scheme="http://blog.codeand.fun/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>《 Java 编程思想》CH06 访问权限控制</title>
    <link href="http://blog.codeand.fun/2020/02/14/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH06-%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <id>http://blog.codeand.fun/2020/02/14/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH06-%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</id>
    <published>2020-02-14T21:31:06.000Z</published>
    <updated>2020-04-02T14:43:48.839Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>访问控制（或隐藏具体实现）与“最初的实现并不恰当”有关</strong>。</li><li>重构即重写代码，以使得它更可读，更容易理解，并因此而更具维护性。</li><li>在面向对象设计中需要考虑一个基本问题：“如何把变动的事物与保持不变的事物区分开来”</li><li>应该尽可能将一切方法都定为<code>private</code>，而仅向客户端程序员公开你愿意让他们使用的方法。</li></ul><h2 id="包：库单元"><a href="#包：库单元" class="headerlink" title="包：库单元"></a>包：库单元</h2><ul><li>包内包含有一组类，它们在单一的名字空间之下被组织在一起</li><li>为了解决潜在的名字冲突问题，Java使用 package 对名称空间进行完全控制并为每一个类创建唯一的标识符组合。</li><li>每一个编译单元（.java 文件）只能有一个 public 类。</li><li>当编译一个 Java 文件时，.java 文件中的每一个类都会生成一个与其类名相同的 .class 文件</li><li>Java 可运行程序是一组可以打包并压缩为一个 Java 文档文件（JAR）的 .class 文件，Java解释器负责这些文件的查找、装载和解释。</li><li>类库实际上一组类文件。其中每个文件都有一个 public 类，以及任意数量的非 public 类。因此每个文件都有一个构件，如果希望他们都属于同一个群组，则可以使用关键词 package。</li><li>package 语句必须是文件中除了注释外的第一行代码。如<code>packgae access;</code>表示当前文件是 access 类库的一部分，标识符为<code>access.ClassName</code>;</li><li>package 名称的第一部分应该是域名的逆序。</li><li>package 名称会被分解为一个目录路径，这个包的所有文件都应该放在该文件夹中，例如包名为<code>fun.wuxiaobai24.access</code>，则被解释成<code>$CLASSPATH/fun/wuxiaobai24/access</code>，其中<code>$CLASSPATH</code>为环境变量，CLASSPATH 可以指定多个目录。</li><li>在使用JAR文件时，需要在 CLASSPATH 中指明JAR文件的真实路径，如<code>CLASSPATH = .;~/jar/access.jar</code></li><li>如果将两个包含相同名称的类库用<code>*</code>形式导入时，在使用重名的类时，需要指明是那个包中的，如<code>fun.wuxiaobai24.access.ClassName c = new fun.wuxiaobai24.access.ClassName()</code></li><li>使用<code>import static</code>语句进行静态导入，将某个包中的所有静态方法导入，这样可以直接用静态方法名进行方法调用，而不用在前面加类名，如调用某个类中的 main() 方法时，静态导入可以直接<code>main();</code>，而普通的导入而需要<code>ClassName.main();</code></li><li>Java 中 没有 C 中的条件编译，但是可以用 import 来间接实现某些功能。</li></ul><h2 id="Java-访问权限修饰词"><a href="#Java-访问权限修饰词" class="headerlink" title="Java 访问权限修饰词"></a>Java 访问权限修饰词</h2><ul><li>包访问权限允许将包内所有相关的类组合在一起，以使得它们彼此之间可以相互访问作用。</li><li>继承而来的类可以访问<code>public</code>和<code>protected</code>，只有当两个类在同一个包中时才能访问包访问权限的成员。</li><li>对于OOP而言，提供访问器和变异器（getter/setter），以读取或改变数值是最优雅的方法，而是 JavaBean 的基本原理。</li><li>如果没有给文件指定包，Java 将这些文件视为该目录的默认包中，于是给该目录中所有其他的文件提供包访问权限。</li><li>不能因为在类中某个对象的引用是 private，就认为其他对象就不能拥有该对象。</li><li>protected 成员除了继承的子类可以访问外，它也有包访问权限，即同一个包下的类可以访问它。</li><li>private 可以用来实现单例子模式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soup</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Soup</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Soup soup = <span class="keyword">new</span> Soup();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Soup <span class="title">access</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> soup;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口和实现"><a href="#接口和实现" class="headerlink" title="接口和实现"></a>接口和实现</h2><p>访问权限的控制常被称为具体实现的隐藏。把数据和方法包装进类中，以及具体的实现的隐藏，常共同被称为<strong>封装</strong>。其结果是一个同时带有特征和行为的数据类型。</p><p>访问权限控制将权限的边界划在数据类型的内部的原因：</p><ul><li>不用担心客户端程序员偶然地将内部机制当作他们可以使用的接口的一部分。</li><li>接口和具体实现的分离</li></ul><h2 id="类的访问权限"><a href="#类的访问权限" class="headerlink" title="类的访问权限"></a>类的访问权限</h2><p>为了控制类的访问权限，修饰词必须出现在关键词 class 之前，如<code>public class ClassName</code>。同时有一些额外的限制：</p><ul><li>每个编译单元（文件）都只能有一个 public 类。每个编译单元都有单一的公共接口，同 public 类实现</li><li>public 类的名称必须与文件名相同，包括大小写。</li><li>编译单元（文件）中可以完全不带 public 类，此时可以随意对文件命名。</li></ul><p><strong>类的访问权限只有 public 和包访问权限</strong>。如果希望其他任何人对该类有访问权限，可以将所有的构造器都指定为 private，但是该类中 static 成员仍然可以创建和访问。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/categories/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
    
      <category term="Java" scheme="http://blog.codeand.fun/tags/Java/"/>
    
      <category term="阅读笔记" scheme="http://blog.codeand.fun/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
      <category term="后端" scheme="http://blog.codeand.fun/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 安装记录</title>
    <link href="http://blog.codeand.fun/2020/02/10/Flutter-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.codeand.fun/2020/02/10/Flutter-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</id>
    <published>2020-02-10T17:42:33.000Z</published>
    <updated>2020-04-02T14:43:48.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最近想开始写日记了，但是找了一圈发现好像好用又安全的App几乎没有，主要是怕不安全。很多App是不支持导出什么的,而且存在别人的服务器上总感觉不好，要是公司倒闭了，我们的日记岂不是全没有，就算有导出功能，要迁移到另一个App上好像也是很麻烦的样子。而那些支持保存到Webdev上基本是不加密的，也很危险啊。Whatever，我现在有点想做一个移动端的东西，也就是日记本。</p><p>调研了一圈，移动端基本上有三种选择：</p><ul><li>Java + Android</li><li>React Native</li><li>Flutter </li></ul><p>三者之中，Java + Android 应该是最稳的，毕竟有点 Java 基础；React Native 应该是最理想的，因为很容易就迁移到网页上啊；Flutter 应该算是一个比较激进的做法了，比较新技术，有许多坑，不过现在应该还是算挺多人在用了。作为一个有志向的开发者，踩坑才是最好玩的事情啊。whatever，我觉得用 Flutter 来实现这个东西了。BTW，写这篇东西一方面是为了记录安装中遇到的坑，另一方面也是立Flag（捂脸）。</p><h2 id="安装-Flutter"><a href="#安装-Flutter" class="headerlink" title="安装 Flutter"></a>安装 Flutter</h2><p>我使用的环境是 Manjaro Linux，所以可以不按照官网上的方法下载包然后安装，直接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S flutter</span><br></pre></td></tr></table></figure><p>安装完后显示下面这个东西，只需要按照他这里说明的进行一些配置即可。有一点要注意的是，这些命令全部都需要 root 权限，即在命令前面加 sudo 即可。</p><p><img src="http://imagehosting.wuxiaobai24.fun/blogFlutter-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95-20200210175913-2020-2-10" alt="安装Flutter后的输出"></p><p>基本上就安装成功了，可以按照<code>flutter.cn</code>中给出的安装教程一步步走即可。</p><h2 id="国情带来的坑"><a href="#国情带来的坑" class="headerlink" title="国情带来的坑"></a>国情带来的坑</h2><p>在第一次运行<code>flutter doctor</code>之前记得把镜像源配置好，这里可以参考<img src="https://flutter.dev/community/china" alt="官方文档">：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://mirrors.tuna.tsinghua.edu.cn/flutter</span><br><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://mirrors.tuna.tsinghua.edu.cn/dart-pub</span><br></pre></td></tr></table></figure><p>然后<code>Gradle</code>也有一个镜像源需要配置：</p><p>一个是项目中<code>android/gradle/build.gradle</code>:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    ext.kotlin_version = <span class="string">'1.3.50'</span></span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        <span class="comment">// google()</span></span><br><span class="line">        <span class="comment">// jcenter()</span></span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/repository/google'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/repository/jcenter'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public'</span> &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.5.0'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        <span class="comment">// google()</span></span><br><span class="line">        <span class="comment">// jcenter()</span></span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/repository/google'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/repository/jcenter'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public'</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是有<code>/opt/flutter/packags/flutter_tools/gradle/flutter.gradle</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        <span class="comment">// google()</span></span><br><span class="line">        <span class="comment">// jcenter()</span></span><br><span class="line">        </span><br><span class="line">        maven &#123; url <span class="string">'https://plugins.gradle.org/m2/'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/repositories/google'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/repositories/jcenter'</span>&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Flutter 学习" scheme="http://blog.codeand.fun/categories/Flutter-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Flutter" scheme="http://blog.codeand.fun/tags/Flutter/"/>
    
      <category term="踩坑记录" scheme="http://blog.codeand.fun/tags/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>《 Java 编程思想》CH05 初始化与清理</title>
    <link href="http://blog.codeand.fun/2020/02/09/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH05-%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E6%B8%85%E7%90%86/"/>
    <id>http://blog.codeand.fun/2020/02/09/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH05-%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E6%B8%85%E7%90%86/</id>
    <published>2020-02-09T11:24:03.000Z</published>
    <updated>2020-04-02T14:43:48.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用构造器确保初始化"><a href="#用构造器确保初始化" class="headerlink" title="用构造器确保初始化"></a>用构造器确保初始化</h2><p>在 Java 中，通过提供构造器，类的设计者可确保每个对象都会得到初始化。Java 会保证初始化的进行。<strong>构造器采用与类相同的名称</strong>。</p><ul><li>由于构造器的名称必须与类名完全相同，所以“每个方法首字母小写”的风格在这里不适用。</li><li>构造器方法可以有参数，这样可以在初始化对象时提供实际参数。</li><li>不接受任何参数的构造器叫做“默认构造器”。</li><li>构造器一种特殊类型的方法，<strong>它没有返回值</strong></li></ul><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>因为可以要用多种方式来创建并初始化一个对象，所以就需要多个构造器，而构造器的名称又需要和类名相同，所以必须允许<strong>方法名相同而形式参数不同的构造器</strong>存在，所以 Java 中有<strong>方法重载</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rock</span> </span>&#123;</span><br><span class="line">Rock() &#123;</span><br><span class="line"><span class="comment">// 默认构造器</span></span><br><span class="line">&#125;</span><br><span class="line">Rock(<span class="keyword">int</span> i) &#123;</span><br><span class="line"><span class="comment">// 带参数的构造器</span></span><br><span class="line">System.out.println(<span class="string">"i="</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"i = null"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"i = "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">Rock r1 = <span class="keyword">new</span> Rock(); <span class="comment">// 调用默认构造器</span></span><br><span class="line">Rock r2 = <span class="keyword">new</span> Rock(<span class="number">1</span>); <span class="comment">// 调用带参数的构造器</span></span><br><span class="line">r2.print();</span><br><span class="line">r2.print(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="区分重载方法"><a href="#区分重载方法" class="headerlink" title="区分重载方法"></a>区分重载方法</h3><p><strong>方法签名是由方法名和参数类型列表构成的</strong>，所以用参数类型列表区分重载方法。<strong>不能用返回值区分重载方法</strong></p><h3 id="设计基本类型的重载"><a href="#设计基本类型的重载" class="headerlink" title="设计基本类型的重载"></a>设计基本类型的重载</h3><p>由于基本类型可能会从一个“较小”的类型自动提升为一个“较大”的类型，所以在重载方法中需要特别注意：</p><ul><li>常数值当作<code>int</code>处理</li><li>实参的数据类型小于形参的数据类型时，会自动提升</li><li>对于 char 类型，如果找不到以 char 作为形参的方法的话，会把 char 类型提升成 int 类型</li><li>如果实参大于形参的话，需要显式的强制转换否则会报编译错误</li></ul><h2 id="默认构造器"><a href="#默认构造器" class="headerlink" title="默认构造器"></a>默认构造器</h2><ul><li>默认构造器是一个没有形式参数的构造器，其作用是创建一个“默认对象”</li><li>如果类中没有构造器，编译器会自动创建一个默认构造器</li><li>如果类中已经有了一个构造器了，编译器则不会自动创建默认构造器</li></ul><h2 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h2><p>由于同一类型的对象都可以调用相同的方法，为了在方法中区分不同的对象，会把对象的引用作为参数传递给方法，<code>a.fun(1)</code>在编译器内部会被翻译成<code>ClassName.fun(a, 1)</code>，我们可以通过<code>this</code>关键字在方法中访问到对象的引用。</p><ul><li>在方法内部调用同个类的另一个方法不需要使用<code>this</code>,直接调用即可。</li><li>this 可以在方法内部作为参数传递给另一个方法，也可以作为返回值（可以构造出链式操作）</li></ul><h3 id="在构造器中调用构造器"><a href="#在构造器中调用构造器" class="headerlink" title="在构造器中调用构造器"></a>在构造器中调用构造器</h3><ul><li>可以利用 this 来实现在构造器中调用构造器，这样可以避免重复代码。</li><li>this 在一个构造器中只能调用一次构造器</li><li>必须将构造器置于最开始处，否则编译器会报错</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Flower</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> petalCount = <span class="number">0</span>;</span><br><span class="line">    String s = <span class="string">"initial value"</span>;</span><br><span class="line"></span><br><span class="line">    Flower(<span class="keyword">int</span> petals) &#123;</span><br><span class="line">        petalCount = petals;</span><br><span class="line">        System.out.println(<span class="string">"int arg ,petalCount = "</span> + petalCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Flower(String ss) &#123;</span><br><span class="line">        s = ss;</span><br><span class="line">        System.out.println(<span class="string">"string arg ,s = "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Flower(String s, <span class="keyword">int</span> petals) &#123;</span><br><span class="line">        <span class="keyword">this</span>(petals);</span><br><span class="line">        <span class="comment">// this 只能调用一次构造器</span></span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">        System.out.println(<span class="string">"string &amp; int arg, s = "</span> + s + <span class="string">", petalCount = "</span> + petalCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Flower() &#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">"hello"</span>, <span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Flower flower = <span class="keyword">new</span> Flower();</span><br><span class="line">        System.out.println(<span class="string">"flower.petalCount = "</span> + flower.petalCount);</span><br><span class="line">        System.out.println(<span class="string">"flower.s = "</span> + flower.s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// int arg ,petalCount = 24</span></span><br><span class="line"><span class="comment">// string &amp; int arg, s = hello, petalCount = 24</span></span><br><span class="line"><span class="comment">// flower.petalCount = 24</span></span><br><span class="line"><span class="comment">// flower.s = hello</span></span><br></pre></td></tr></table></figure><h3 id="static-的含义"><a href="#static-的含义" class="headerlink" title="static 的含义"></a>static 的含义</h3><p>static 方法就是没有 this 的方法，在 static 中不能调用非静态方法，但是反过来可以。</p><h2 id="清理：终结处理和垃圾回收"><a href="#清理：终结处理和垃圾回收" class="headerlink" title="清理：终结处理和垃圾回收"></a>清理：终结处理和垃圾回收</h2><ol><li>对象可能不会被垃圾回收</li><li>垃圾回收不等于“析构”<ol><li>Java 未提供“析构函数”或相似的概念，要做类似的清理工作，必须手动创建一下执行清理工作的普通方法</li></ol></li><li>垃圾回收只与内存有关<ol><li>对与垃圾回收有关的任何行为来说（尤其是 finalize() 方法），它们必须同内存及其回收相关</li><li>finalize() 的需求通常是用于一种特殊情况，即通过某种创建对象方式以外的方式为对象分配了存储空间，这种情况主要发生在使用了“本地方法”的情况下，本地方法是一种在 Java 中调用非 Java 代码的方式。如在非 Java 代码中调用了 malloc，为了释放内存，我们需要在 finalize() 中调用对应的本地方法进行 free。</li><li>finalize() 方法的执行机制：<strong>一旦垃圾回收器准备释放对象占用的存储空间，首先调用其 finalize() 方法，并且在下一次垃圾回收动作发生时，才会真正回收对象占用的内存。</strong></li></ol></li></ol><h3 id="你必须实施清理"><a href="#你必须实施清理" class="headerlink" title="你必须实施清理"></a>你必须实施清理</h3><p>Java 中没有用于释放对象的 delete，因为垃圾回收器会自动帮你释放存储空间，因此 Java 中没有析构函数。<strong>但是垃圾回收不能完全代替析构函数</strong>，如果希望进行除释放存储空间之外的清理工作，我们需要明确调用某个 Java 方法。例如某个类打开了一个文件，垃圾回收不能自动帮我们关闭这个文件。为什么这个工作不能有 finalize() 方法来完成呢，原因其实在上面已经说明了，<strong>对象可能不会被垃圾回收</strong>，也就是说 finalize() 方法可能永远都不会被调用。</p><p>如果 JVM 没有面临内存耗尽的情况，它是不会浪费时间去执行垃圾回收以恢复内存的。</p><h3 id="终结条件"><a href="#终结条件" class="headerlink" title="终结条件"></a>终结条件</h3><p>虽然我们不能用 finalize() 方法来进行“清理”，但是我们可以利用它验证某个对象的终结条件。还是刚才那个打开文件的例子，假设在文件没有关闭的时候，垃圾回收将对象回收了，这就会产生一些非常难找的 bug。而 finalize() 可以帮助我们发现这种 bug。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> checkedOut = <span class="keyword">false</span>;</span><br><span class="line">    Book(<span class="keyword">boolean</span> checkOut) &#123;</span><br><span class="line">        checkedOut = checkOut;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">checkIn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkedOut = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (checkedOut) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Error: checked out"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// super.finalize();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminationCondition</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Book novel = <span class="keyword">new</span> Book(<span class="keyword">true</span>);</span><br><span class="line">        novel.checkIn();</span><br><span class="line">        <span class="keyword">new</span> Book(<span class="keyword">true</span>);</span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Error: checked out</span></span><br></pre></td></tr></table></figure><p>如上面这个例子，我们希望 Book 在被回收前已经 checkIn 了，所以我们在 finalize() 中写了一个条件语句来判断。</p><ul><li><code>System.gc()</code>强制 GC</li><li>应该总是假设基类的 finalize() 也需要做某些时间，所以我们应该在 finalize() 函数的末尾加入 <code>super.finalize();</code></li></ul><h3 id="垃圾回收器如何工作"><a href="#垃圾回收器如何工作" class="headerlink" title="垃圾回收器如何工作"></a>垃圾回收器如何工作</h3><p>垃圾回收器会提高对象在堆上创建的速度，这是因为 Java 的堆的实现与 C++ 的不同，其更像是一个传送带，每分配一个对象，它就往前移动一格，所以“堆指针” 只是简单的移动到尚未分配的空间，这意味 Java 中在堆上的分配速度非常快。当然，如果只是简单的像传送带一样工作的话，Java 的堆会占用大量的虚拟内存，进而导致频繁的页面调度，并可能会导致内存资源耗尽，因此需要有垃圾回收器的介入。垃圾回收会一边回收空间一边对堆进行“紧凑”操作。</p><p>几种常见的垃圾回收机制：</p><ul><li>引用计数：一种简单但比较慢的垃圾回收机制。<ul><li>每个对象都有一个引用计数器，当引用连接对象时，引用计数加一，当引用离开作用域或被置 null 时，引用计数减一。</li><li>这种方法无法处理“循环引用”的情况。</li></ul></li><li>停止-复制（stop-and-copy)：<ul><li>其依据的思想是：对任何“活”的对象，一定能最终追溯到其存活在堆栈或静态存储区域之中。因此，可以从堆栈和静态存储区开始，遍历所有的引用，并递归查找该对象所包含的所有对象，即可找到所有“活”的对象。</li><li>该机制会先暂停程序的运行，然后将所有存活的对象从当前堆复制到另一个堆，然后更新引用</li><li>当对象被复制到新的堆中时，没复制的则相当于被回收了，同时可以实现“紧凑”的目标。</li><li>该机制会有以下两个缺点：<ul><li>需要两个堆，进而需要维护比之前大一倍的空间</li><li>如果只有少量垃圾甚至没有垃圾，而这时如果进行垃圾回收的话，开销太大了。</li></ul></li></ul></li><li>标记-清扫（mark-and-sweep)：<ul><li>与 stop-and-copy 机制依据的思想是一样的也是，用同样的方式找到“活”的对象</li><li>每当它找到一个“活”的对象，就会给该对象一个标记，这个过程中不会回收任何对象。只有当全部标记工作完成时，才会进行清理。</li><li>清理的过程中，没有被标记的对象被释放，但<strong>不会做任何复制动作</strong>。</li><li>为了避免存储空间的“碎片化”，JVM 需要做紧凑操作</li></ul></li></ul><p>JVM 中采用的垃圾回收机制：</p><ul><li>一种结合的 stop-and-copy 和 mark-and-sweep 的自适应垃圾回收算法</li><li>内存分配以较大的“快”作为单位，较大的对象可以独占一个块。每个块都有相应的代数（generation count）来记录它是否存活。</li><li>垃圾回收会对上次回收操作之后新分配的快进行整理，这样有助于解决有大量短命对象的情况。</li><li>垃圾回收机制会定期进行完整的清理——大型对象仍然不会被复制（只是其代数会增加），而那些含有大量小型对象的快会被复制并整理。</li><li>当只有少量或没有垃圾产生时，则转为使用 mark-and-sweep 算法。</li></ul><p>Java 中 JIT（Just-In-Time）技术：</p><p>这种技术可以把程序全部或部分翻译成本地机器码，而不是通过 JVM，进而提升程序的运行速度。</p><p>当需要装载某个类时（第一次创建这个类时），编译器会找到其.class 文件，然后将该类的字节码装入内存，此时有两种做法：</p><ul><li>JIT 直接编译所有代码，但这个做法会有两个缺点：<ul><li>加载动作分散在整个程序中，累加起来要话更多时间</li><li>可能会增加可执行代码的长度，进而导致页面调度</li></ul></li><li>惰性评估（lazy evaluation）：，即 JIT 只在必要时才编译，这样不会执行的代码就不会被 JIT 所编译。</li></ul><h2 id="成员初始化"><a href="#成员初始化" class="headerlink" title="成员初始化"></a>成员初始化</h2><p><strong>Java 尽力保证：所有变量在使用前都能得到适当的初始化。</strong></p><p>局部变量没有默认初始值，如有在未初始化前使用它会报错编译错误，而类变量则有默认初始值。</p><h3 id="指定初始化"><a href="#指定初始化" class="headerlink" title="指定初始化"></a>指定初始化</h3><p>Java 允许在定义类成员变量的时候为其赋值进行初始化。非基本类型也可以，同时可以使用已经函数或已经初始化好的变量进行初始化，但要保证初始化顺序的正确。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitialValues</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> t = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">short</span> s = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> i = func(s);</span><br><span class="line"><span class="keyword">long</span> l = <span class="number">4</span> + i;</span><br><span class="line"><span class="keyword">float</span> f = (<span class="keyword">float</span>)<span class="number">5.0</span>; <span class="comment">// 浮点数字面量是 double 类型的</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">6.0</span>;</span><br><span class="line">String reference = <span class="keyword">new</span> String(<span class="string">"hello world"</span>); <span class="comment">// 非基本类型也可以</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">short</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造器初始化"><a href="#构造器初始化" class="headerlink" title="构造器初始化"></a>构造器初始化</h2><ul><li>无法阻止自动初始化的进行，它将在构造器之前执行。</li><li>类变量的定义顺序决定了初始化的顺序</li><li>静态数据的默认值与类变量一致</li><li>对于静态变量，Java 可以将多个初始化语句组合成一个静态块，其和静态变量初始化一样在类加载时执行。顺序与定义时的顺序相同</li><li>对于非静态变量，Java 中也可以将多个初始化语句组成一个块，在实例初始化执行。</li><li>对于以上两种块，既可以可以把它当成一条初始化语句来看待。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitialValues</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> t = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">short</span> s = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">long</span> l = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">float</span> f;</span><br><span class="line"><span class="keyword">double</span> d;</span><br><span class="line">String reference;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">f = (<span class="keyword">float</span>) <span class="number">1.0</span>;</span><br><span class="line">d = <span class="number">2</span>*f;</span><br><span class="line">reference = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">reference = reference + f + d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"A is "</span> + a);</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象的创建过程：</p><ol><li>第一次创建类或者访问其静态数据或方法，JVM 会加载其 .class 文件，此时执行所有静态初始化（按定义的顺序执行）。</li><li>当 new 该类时，首先会在堆上分配空间，因为堆在分配前被置零了，所以本类型的默认值都是 0，非基本类型的引用的默认值则是 null。</li><li>按顺序执行非静态的初始化</li><li>执行构造器</li></ol><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><p>数组是同类型的、用一个标识符名称封装到一起的一个对象序列或基本类型数据序列。</p><p>定义方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a; <span class="comment">//建议使用这种</span></span><br><span class="line"><span class="keyword">int</span> a[]; <span class="comment">//这样也可以， 但是不能指定数组的类型。`int a[3];` 这样是不允许的</span></span><br></pre></td></tr></table></figure><p><code>int[] a;</code>这样只是定义了一个数组的引用，我们可以使用<code>new</code>来创建一个数组，也可以直接初始化数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; <span class="comment">// 使用 new 来创建一个数组，这时真实数据会分配在堆中，所以默认值都为“零”</span></span><br><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; <span class="comment">// 直接初始化一个长度为3的数组</span></span><br><span class="line">Integer[] c = <span class="keyword">new</span> Integer[<span class="number">3</span>]; <span class="comment">// 创建一个对象数组，保存引用，这时初始值都为 null</span></span><br><span class="line">Random rand = <span class="keyword">new</span> Random(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> len = rand.nextInt(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[len]; <span class="comment">// 长度不一定要是一个字面值，可以是变量</span></span><br></pre></td></tr></table></figure><p>数组初始化的坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">InitialValues initialValues = <span class="keyword">new</span> InitialValues();</span><br><span class="line">initialValues.printInitialValues();</span><br><span class="line">String[] stringArray = &#123;<span class="string">"hello"</span>, <span class="string">"world"</span>&#125;;</span><br><span class="line"><span class="comment">// initialValues.printStringArrary(&#123;"hello", "world"&#125;); // 编译错误</span></span><br><span class="line">initialValues.printStringArrary(stringArray);</span><br><span class="line">initialValues.printStringArrary(<span class="keyword">new</span> String[]&#123;<span class="string">"hello"</span>, <span class="string">"world"</span>&#125;); <span class="comment">//正确打开方式</span></span><br><span class="line"><span class="keyword">int</span>[] intArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">// initialValues.printIntArray(&#123;1, 2, 3, 4&#125;); // 编译错误</span></span><br><span class="line">initialValues.printIntArray(intArray);</span><br><span class="line">initialValues.printIntArray(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h2><p>在方法中，用<code>ClassName... ArgName</code>的形式可以定义可变参数列表，在方法中，ArgName 本质上是一个数组。在可变列表中可以使用任何类型，包括基础类型。这里传入基本类型时，没有依赖自动装包和解包，这意味着，ClassName 为 int 时，ArgName 是一个 int[]，而不是 Integer。<strong>在重载方法时，应该只在一个方法中使用可变参数列表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Object arg: args) &#123;</span><br><span class="line">        System.out.print(arg + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> required, <span class="keyword">int</span>... args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Required: "</span> + required);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i: args) &#123;</span><br><span class="line">        System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    printArray(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    f(<span class="number">1</span>);</span><br><span class="line">    f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    Integ</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><ul><li>按照命名习惯，枚举值一般用全大写字母</li><li>为了使用 enum，需要创建一个该类型的引用</li><li>enum 会自动创建一些实用的函数，如<code>toString()</code>显示其名称，<code>ordinal()</code>表示声明顺序</li><li>enum 适合与 switch 一起使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> EnumDemo &#123;</span><br><span class="line">HELLO, WORLD, </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">EnumDemo e1 = EnumDemo.HELLO;</span><br><span class="line">System.out.println(e1); <span class="comment">// 自动调用toString()</span></span><br><span class="line">System.out.println(e1.ordinal());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(EnumDemo e: EnumDemo.values()) &#123;</span><br><span class="line">    System.out.println(<span class="string">"EnumDemo: "</span> + e + <span class="string">" ordinal "</span> + e.ordinal());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// HELLO</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// EnumDemo: HELLO ordinal 0</span></span><br><span class="line"><span class="comment">// EnumDemo: WORLD ordinal 1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/categories/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
    
      <category term="Java" scheme="http://blog.codeand.fun/tags/Java/"/>
    
      <category term="阅读笔记" scheme="http://blog.codeand.fun/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
      <category term="后端" scheme="http://blog.codeand.fun/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>《 Java 编程思想》CH04 控制执行流程</title>
    <link href="http://blog.codeand.fun/2020/02/09/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH04-%E6%8E%A7%E5%88%B6%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
    <id>http://blog.codeand.fun/2020/02/09/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH04-%E6%8E%A7%E5%88%B6%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</id>
    <published>2020-02-09T10:47:56.000Z</published>
    <updated>2020-04-02T14:43:48.839Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Java 中控制流程基本与 C/C++ 类似，所以大部分相同的部分会选择跳过。</p></blockquote><h2 id="true-和-false"><a href="#true-和-false" class="headerlink" title="true 和 false"></a>true 和 false</h2><p><strong>Java 不允许使用一个数字作为布尔值使用</strong></p><h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h2><p>与 C/C++ 一样：</p><ul><li>if</li><li>else </li><li>if else</li></ul><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>与 C/C++ 一样：</p><ul><li>while</li><li>do-while</li><li>for</li></ul><p>使用逗号操作符可以在 for 语句中定义多个变量（必须是同样类型）和执行多个语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span> + <span class="number">1</span>; i &lt; <span class="number">10</span>; i++, i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"i = "</span> + i + <span class="string">",j = "</span> + j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Foreach-语法"><a href="#Foreach-语法" class="headerlink" title="Foreach 语法"></a>Foreach 语法</h2><p>使用<code>foreach</code>语法可以方便的遍历数组或容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// f 为一个float的数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">float</span> x: f) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><p><code>return</code>的两种用途：</p><ul><li>指定方法的返回值</li><li>从方法的任何位置退出</li></ul><p>返回值类型为 void 的方法可以没有 return，此时该方法的结尾处会有一个隐式的 return</p><h2 id="break-amp-continue-amp-goto"><a href="#break-amp-continue-amp-goto" class="headerlink" title="break &amp; continue  &amp; goto"></a>break &amp; continue  &amp; goto</h2><p>Java 中 break 和 continue 与 C/C++ 类似，但是 Java 中没有 goto，但可以用 break 和 continue 实现跳转。</p><p>标签：</p><ul><li>标识符 + <code>，如</code>label1:`</li><li>应该放在迭代语句之前，中间不能有任何语句</li></ul><p>continue &amp; break 与标签一起使用：</p><ul><li>一般的 continue 会退回到最内层循环的开头继续执行</li><li>带标签的 continue 会退回到标签的位置，并重新进行标签后面那个循环</li><li>一般 break 会跳出当前循环</li><li>带标签的 break 会跳出标签所指定的循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">outer:</span><br><span class="line"><span class="keyword">for</span>(;<span class="keyword">true</span>;) &#123; <span class="comment">// for1</span></span><br><span class="line">inner:</span><br><span class="line"><span class="keyword">for</span>(;<span class="keyword">true</span>;) &#123; <span class="comment">// for2</span></span><br><span class="line"><span class="keyword">continue</span>; <span class="comment">//继续执行 for2 循环</span></span><br><span class="line"><span class="keyword">continue</span> inner; <span class="comment">// 继续执行 for2 循环</span></span><br><span class="line"><span class="keyword">continue</span> outer; <span class="comment">// 继续执行 for1 循环</span></span><br><span class="line"><span class="keyword">break</span>; <span class="comment">// 跳出 for2</span></span><br><span class="line"><span class="keyword">break</span> inner; <span class="comment">// 跳出 for2</span></span><br><span class="line"><span class="keyword">break</span> outer; <span class="comment">// 跳出 for1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>与 C++ 类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(integral-selector) &#123;</span><br><span class="line"><span class="keyword">case</span> integral-value1: statement; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> integral-value2: statement; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> integral-value3: statement; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/categories/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
    
      <category term="Java" scheme="http://blog.codeand.fun/tags/Java/"/>
    
      <category term="阅读笔记" scheme="http://blog.codeand.fun/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
      <category term="后端" scheme="http://blog.codeand.fun/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>《 Java 编程思想》CH03 操作符</title>
    <link href="http://blog.codeand.fun/2020/02/08/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH03-%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>http://blog.codeand.fun/2020/02/08/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH03-%E6%93%8D%E4%BD%9C%E7%AC%A6/</id>
    <published>2020-02-08T17:57:48.000Z</published>
    <updated>2020-04-02T14:43:48.839Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>在最底层，Java中的数据是通过操作符来操作的。</strong></p></blockquote><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><ul><li><code>+</code>,<code>-</code>,<code>*</code>,<code>*</code>，<code>=</code>与其他语言类似</li><li>几乎所有的操作符只能操作“基本类似”，而<code>=</code>，<code>==</code>，<code>!=</code>是例外</li><li>String 类支持<code>+</code>和<code>+=</code>操作符，表示拼接操作，在进行拼接的操作会尝试将非 String 的元素转换为 String（调用tostring())</li><li>赋值操作符<code>=</code>的左边（左值）必须是一个明确的已命名的变量。</li></ul><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>在为对象“赋值”时，其实质是拷贝“引用”，需要注意“别名现象”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch03;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Assignment</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Tank tank1 = <span class="keyword">new</span> Tank();</span><br><span class="line">        Tank tank2 = <span class="keyword">new</span> Tank();</span><br><span class="line">        tank1.level = <span class="number">12</span>;</span><br><span class="line">        tank2.level = <span class="number">13</span>;</span><br><span class="line">        System.out.println(<span class="string">"tank1 = "</span> + tank1.level);</span><br><span class="line">        System.out.println(<span class="string">"tank2 = "</span> + tank2.level);</span><br><span class="line"></span><br><span class="line">        tank1 = tank2;</span><br><span class="line">        tank1.level++;</span><br><span class="line">        System.out.println(<span class="string">"tank1 = "</span> + tank1.level);</span><br><span class="line">        System.out.println(<span class="string">"tank2 = "</span> + tank2.level);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//tank1 = 12</span></span><br><span class="line"><span class="comment">//tank2 = 13</span></span><br><span class="line"><span class="comment">//tank1 = 14</span></span><br><span class="line"><span class="comment">//tank2 = 14</span></span><br></pre></td></tr></table></figure><h3 id="方法调用中的别名问题"><a href="#方法调用中的别名问题" class="headerlink" title="方法调用中的别名问题"></a>方法调用中的别名问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.ch03;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Letter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(Letter y)</span> </span>&#123;</span><br><span class="line">        y.c = <span class="string">'z'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Letter x = <span class="keyword">new</span> Letter();</span><br><span class="line">        x.c = <span class="string">'a'</span>;</span><br><span class="line">        System.out.println(<span class="string">"x.c = "</span> + x.c); <span class="comment">// a</span></span><br><span class="line">        f(x);</span><br><span class="line">        System.out.println(<span class="string">"x.c = "</span> + x.c); <span class="comment">// z</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管是那种别名问题，关键是要理解到<strong>拷贝的是引用，不是对象。</strong></p><h2 id="算数操作符-amp-自增与自减-amp-按位操作符"><a href="#算数操作符-amp-自增与自减-amp-按位操作符" class="headerlink" title="算数操作符 &amp; 自增与自减 &amp; 按位操作符"></a>算数操作符 &amp; 自增与自减 &amp; 按位操作符</h2><ul><li>整数除法不会四舍五入，而是直接舍去小数位</li><li>其余与C++中的一样</li></ul><h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h2><p>关系操作符与 C++ 也是类似，有一点比较特殊的是在 Java 中<code>==</code>和<code>!=</code>可以用在对象上，其比较的是<strong>引用</strong>，而不是对象内的值，如果要比较两个对象是否相等（语义上），通常调用<code>equals</code>函数来比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer n1 = <span class="keyword">new</span> Integer(<span class="number">47</span>);</span><br><span class="line">Integer n2 = <span class="keyword">new</span> Integer(<span class="number">47</span>);</span><br><span class="line">n1 == n2; <span class="comment">// false</span></span><br><span class="line">n1.equals(n2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong><code>equals</code>默认是比较引用，所以在自己实现的类中需要覆盖<code>equals</code>方法才能进行语义上的比较</strong></p><h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><p><code>&amp;&amp;</code>,<code>||</code>和<code>!</code>操作只能用于布尔值，<strong>与C++不同，对一个非布尔值进行逻辑运算不会对该值强制转换，会报编译错误</strong></p><p>Java中的逻辑操作符也有“短路”现象</p><h2 id="直接常量"><a href="#直接常量" class="headerlink" title="直接常量"></a>直接常量</h2><ul><li>十六进制<code>0x/0X</code>前缀+<code>0-9</code>和<code>a-f</code></li><li>八进制<code>0</code>前缀+<code>0-8</code></li><li>后缀<code>l/L</code>表示<code>long</code>类型</li><li>后缀<code>f/F</code>表示<code>float</code>类型</li><li>后缀<code>d/D</code>表示<code>double</code>类型</li><li>指数记数法：<code>1.39E-43</code>表示$1.39 \times e^{-43}$</li></ul><h2 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h2><ul><li>移位操作符只能用于处理整数类型</li><li><code>&gt;&gt;</code>符号扩展，<code>&gt;&gt;&gt;</code>0扩展</li><li>对 char、byte、short 类型进行移位运算，在进行移位之前会先转回为 int</li></ul><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><blockquote><p>boolean-exp ? value0 : value1</p></blockquote><h2 id="字符串操作符-和"><a href="#字符串操作符-和" class="headerlink" title="字符串操作符 + 和+="></a>字符串操作符 <code>+</code> 和<code>+=</code></h2><ul><li>字符串中操作符 <code>+</code> 和<code>+=</code>表示“拼接”操作</li><li><strong>如果一个表达式以字符串开头，那么其后续操作数都必须是字符串类型（不是则进行强制转换）</strong></li></ul><h2 id="类型转换操作符"><a href="#类型转换操作符" class="headerlink" title="类型转换操作符"></a>类型转换操作符</h2><p><strong>类型转换（<code>cast</code>)</strong>是指，在适当的时候，Java 会将一种数据类型自动转换为另一种。</p><p>显式的类型转换如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">long</span> l = (<span class="keyword">long</span>)i;</span><br><span class="line"><span class="keyword">int</span> j = (<span class="keyword">int</span>)l;</span><br></pre></td></tr></table></figure><h3 id="类型转换："><a href="#类型转换：" class="headerlink" title="类型转换："></a>类型转换：</h3><ul><li>窄式转换，需要显式指定（如 long 转 int）</li><li>扩展转换，无需显式指定（如 int 转 long）</li><li><strong>Java允许任何基本类型之间的类型转换，除了布尔值。</strong></li><li>“类”数据类型不允许类型转换</li></ul><h3 id="截尾和舍入"><a href="#截尾和舍入" class="headerlink" title="截尾和舍入"></a>截尾和舍入</h3><ul><li>当 float 或 double 转向整型时，总是对数字进行截尾</li><li>如果需要舍入，可以调用<code>java.lang.Math.round()</code></li></ul><h3 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h3><p><strong>一个表达式中出现的最大的数据类型决定了该表达式最终结果的数据类型</strong>，如 int 类型与 long 类型相加，得到一个 long 类型。</p><h2 id="Java-没有-sizeof"><a href="#Java-没有-sizeof" class="headerlink" title="Java 没有 sizeof"></a>Java 没有 sizeof</h2><p>由于Java中所有基本数据类型的大小都是明确的，所以不需要sizeof。BTW，boolean 不是没有明确嘛。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/categories/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
    
      <category term="Java" scheme="http://blog.codeand.fun/tags/Java/"/>
    
      <category term="阅读笔记" scheme="http://blog.codeand.fun/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
      <category term="后端" scheme="http://blog.codeand.fun/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>《 Java 编程思想》CH02 一切都是对象</title>
    <link href="http://blog.codeand.fun/2020/02/08/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH02-%E4%B8%80%E5%88%87%E9%83%BD%E6%98%AF%E5%AF%B9%E8%B1%A1/"/>
    <id>http://blog.codeand.fun/2020/02/08/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH02-%E4%B8%80%E5%88%87%E9%83%BD%E6%98%AF%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-02-08T13:52:42.000Z</published>
    <updated>2020-04-02T14:43:48.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用引用操纵对象"><a href="#用引用操纵对象" class="headerlink" title="用引用操纵对象"></a>用引用操纵对象</h2><p>尽管Java中一切都看作为对象，但是操纵的标识符实际上对象的一个“引用”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s; <span class="comment">// 这里只是创建了一个引用，而不是一个对象</span></span><br><span class="line">String s = <span class="keyword">new</span> String(<span class="string">"abcd"</span>); <span class="comment">// 使用`new`操作符来创建一个对象，并将其与一个引用相关联</span></span><br><span class="line">String s = <span class="string">"abcd"</span>; <span class="comment">// 字符串可以直接用带引号的文本初始化</span></span><br></pre></td></tr></table></figure><h2 id="必须由你创建所有对象"><a href="#必须由你创建所有对象" class="headerlink" title="必须由你创建所有对象"></a>必须由你创建所有对象</h2><p>使用<code>new</code>操作符创建一个对象</p><h3 id="存储到什么位置"><a href="#存储到什么位置" class="headerlink" title="存储到什么位置"></a>存储到什么位置</h3><p>由五个地方可以存储数据：</p><ol><li>寄存器：由于寄存器数量有限，所有无法直接控制</li><li>堆栈（栈）：RAM中，存储在栈中的数据必须明确知道其生命周期，通常局部存放对象引用和局部基本类型的变量。</li><li>堆：存放所有的对象</li><li>常量存储：通常直接存放在代码内部，其永远不会改变</li><li>非RAM存储：数据存放在程序之外，不受程序的控制，如流对象（System.out）和持久化对象（存放在磁盘的文件）。</li></ol><h3 id="特例：基本类型"><a href="#特例：基本类型" class="headerlink" title="特例：基本类型"></a>特例：基本类型</h3><p>一些比较小的，简单的类型，如果放在堆中往往效率不高，所以这些类型不需要使用<code>new</code>来创建，而是创建一个“自动”变量来直接存储“值”，并置于栈中。</p><p><strong>Java 中所有基本类型所占据存储空间的大小都是明确的</strong>.</p><p><img src="http://imagehosting.wuxiaobai24.fun//blog/Java%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%A4%A7%E5%B0%8F.png" alt="Java基本类型大小"></p><ul><li>所有数值类型都有正负号</li><li><code>boolean</code>类型所占存储空间的大小没有明确，仅定义为能够去字面值<code>true</code>或<code>false</code></li><li>基本类型和其对应的包装类之间可以自动装包、自动解包</li><li>Java 提供了两个用于高精度计算的类：<code>BigInteger</code>和<code>BigDecimal</code></li></ul><h3 id="Java-中的数组"><a href="#Java-中的数组" class="headerlink" title="Java 中的数组"></a>Java 中的数组</h3><ul><li>Java 确保数组会被初始化，且会进行范围检查</li><li>当创建一个数组对象时实际就是创建一个引用数组，并且每个引用都会被自动初始化为一个特定值<code>null</code></li><li>也可以创建用来存放基本数据类型的数组，此时的初始化则是置零</li></ul><h2 id="永远不需要销毁对象"><a href="#永远不需要销毁对象" class="headerlink" title="永远不需要销毁对象"></a>永远不需要销毁对象</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li>作用域决定了在其内定义的变量的可见性和生命周期</li><li>在作用域里定义的变量只可用于作用域结束前</li><li>Java 中不允许“覆盖”变量的可见性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">12</span>;</span><br><span class="line"><span class="comment">// x available</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q = <span class="number">96</span>;</span><br><span class="line"><span class="comment">// Both x &amp; q available</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">96</span> <span class="comment">// Illegal</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// only x available</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的作用域"><a href="#对象的作用域" class="headerlink" title="对象的作用域"></a>对象的作用域</h3><ul><li>Java 对象不具备和基本类型一样的生命周期，由<code>new</code>创建的对象，只要你需要，其会一直保留下去。</li><li>Java 使用垃圾回收器来监视<code>new</code>创建的对象，辨别并释放那些不会再被引用的对象</li></ul><h2 id="创建新的数据类型：类"><a href="#创建新的数据类型：类" class="headerlink" title="创建新的数据类型：类"></a>创建新的数据类型：类</h2><p>使用<code>class</code>来创建一个新的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ATypeName</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="字段和方法"><a href="#字段和方法" class="headerlink" title="字段和方法"></a>字段和方法</h2><p>一旦定义了一个类，就可以在类中设置两种元素：字段（数据成员）和方法（成员函数）。字段可以是任何类型的对象或基础类型。每个对象都有存储其字段的空间，即普通字段不在对象间共享。</p><p>引用一个对象的成员的方式：<code>objectReference.member</code></p><p>基本数据类型的变量只有是类的成员时，才确保其获得一个默认值，否则的话，与C++一样，该变量可能是任意值（其实就是在堆还是栈的问题嘛），不过这种情况下Java会报编译错误。</p><h2 id="方法、参数和返回值"><a href="#方法、参数和返回值" class="headerlink" title="方法、参数和返回值"></a>方法、参数和返回值</h2><p>方法的基本组成部分包括：名称、参数、返回值和方法体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ReturnType <span class="title">methodName</span> <span class="params">( <span class="comment">/* Argument list */</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">/* Method body */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法名和参数列表唯一地标识某个方法（合起来称为“方法签名”）<strong>注意：方法签名不包含返回值</strong>。</p><p>Java 中的方法只能作为类的一部分来创建，方法通常只有通过对象才能调用，且这个对象必须有这个方法。</p><h3 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h3><p>方法的参数列表指定要传递给方法什么样的信息，这里采用的都是<strong>对象的类型</strong>，即包含指定的类型和名字，这里传递的实际上是<strong>引用</strong>，传递基础类型则通过自动包装来实现。</p><h2 id="构建一个-Java-程序"><a href="#构建一个-Java-程序" class="headerlink" title="构建一个 Java 程序"></a>构建一个 Java 程序</h2><h3 id="名字可见性"><a href="#名字可见性" class="headerlink" title="名字可见性"></a>名字可见性</h3><p>为了防止不同类库中使用了相同的类名，Java 将反过来的域名作为唯一标识符（即包名），如我的域名为<code>codeand.fun</code>,则我的类库则使用<code>fun.codeand.utils</code>的形式。</p><p><strong>包名使用小写</strong></p><h3 id="运用其他构件"><a href="#运用其他构件" class="headerlink" title="运用其他构件"></a>运用其他构件</h3><p>使用<code>import</code>导入想要的包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.*; <span class="comment">// 导入java.util下所有的类</span></span><br></pre></td></tr></table></figure><p><code>java.lang</code>默认导入到每一个Java文件中。</p><h3 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h3><p>当声明一个事物为<code>static</code>时，就意味着这个域或方法不会与包含它的类的任何对象实例关联在一起，可以理解为<em>类数据</em>和<em>类方法</em>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">47</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">()</span> </span>&#123; i++; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = StaticTest.i; <span class="comment">// 47</span></span><br><span class="line">StaticTest st1 = <span class="keyword">new</span> StaticTest();</span><br><span class="line">StaticTest.inc();</span><br><span class="line">StaticTest st2 = <span class="keyword">new</span> StaticTest();</span><br><span class="line"><span class="comment">// st1.i == st2.i == 48 // 所有i都指向同一个存储空间</span></span><br></pre></td></tr></table></figure><h2 id="你的第一个-Java-程序"><a href="#你的第一个-Java-程序" class="headerlink" title="你的第一个 Java 程序"></a>你的第一个 Java 程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HelloDate.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloDate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, it's"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要创建一个独立运行的程序，那么该文件中必须存在某个类与该文件同名，且那个类必须又一个<code>main</code>方法，其形式如<code>public static void main(String[] args)</code>。</p><h2 id="编译和运行"><a href="#编译和运行" class="headerlink" title="编译和运行"></a>编译和运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ javac HelloDate.java // 编译，产生一个 HelloDate.class 文件</span><br><span class="line">$ java HelloDate // 运行</span><br></pre></td></tr></table></figure><h2 id="注释和嵌入式文档"><a href="#注释和嵌入式文档" class="headerlink" title="注释和嵌入式文档"></a>注释和嵌入式文档</h2><ul><li>多行注释：<code>/* something */</code></li><li>单行注释：<code>// something</code></li></ul><h3 id="注释文档"><a href="#注释文档" class="headerlink" title="注释文档"></a>注释文档</h3><p>Java 中可以将代码与文档放到一个文件中，这样有利于文档的维护，为了实现这一目的，这里使用一种特殊的注释语法来标记文档，此外还有一个工具<code>javadoc</code>来提取注释。javadoc的输出是一个html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wuxiaobai24 @ wuxiaobai24-pc in ~/code/Java/ch2 [17:56:05] C:1</span></span><br><span class="line">$ javadoc HelloDate.java </span><br><span class="line">正在加载源文件HelloDate.java...</span><br><span class="line">正在构造 Javadoc 信息...</span><br><span class="line">标准 Doclet 版本 1.8.0_242</span><br><span class="line">正在构建所有程序包和类的树...</span><br><span class="line">正在生成./HelloDate.html...</span><br><span class="line">正在生成./package-frame.html...</span><br><span class="line">正在生成./package-summary.html...</span><br><span class="line">正在生成./package-tree.html...</span><br><span class="line">正在生成./constant-values.html...</span><br><span class="line">正在构建所有程序包和类的索引...</span><br><span class="line">正在生成./overview-tree.html...</span><br><span class="line">正在生成./index-all.html...</span><br><span class="line">正在生成./deprecated-list.html...</span><br><span class="line">正在构建所有类的索引...</span><br><span class="line">正在生成./allclasses-frame.html...</span><br><span class="line">正在生成./allclasses-noframe.html...</span><br><span class="line">正在生成./index.html...</span><br><span class="line">正在生成./<span class="built_in">help</span>-doc.html...</span><br><span class="line"></span><br><span class="line"><span class="comment"># wuxiaobai24 @ wuxiaobai24-pc in ~/code/Java/ch2 [17:56:11] </span></span><br><span class="line">$ ls</span><br><span class="line">allclasses-frame.html    HelloDate.class  index-all.html      package-list          stylesheet.css</span><br><span class="line">allclasses-noframe.html  HelloDate.html   index.html          package-summary.html</span><br><span class="line">constant-values.html     HelloDate.java   overview-tree.html  package-tree.html</span><br><span class="line">deprecated-list.html     <span class="built_in">help</span>-doc.html    package-frame.html  script.js</span><br></pre></td></tr></table></figure><p><img src="http://imagehosting.wuxiaobai24.fun//blog/Index%E6%98%BE%E7%A4%BA.png" alt="打开index.html"></p><h3 id="注释语法"><a href="#注释语法" class="headerlink" title="注释语法"></a>注释语法</h3><p>所有 javadoc 命令都只能在由<code>/**</code>和<code>*/</code>组成的注释中</p><p>javadoc 的注释，只能为<code>public</code>和<code>protected</code>成员进行文档注释，而<code>private</code>和<code>defaule</code>成员的注释会被忽视掉</p><p>javadoc 主要有两种形式：</p><ul><li>嵌入HTML</li><li><strong>文档标签</strong>：<ul><li><strong>独立文档标签</strong>是一些以<code>@</code>字符开头的命令，且置于注释行的最前面（除了前导的 <code>*</code>）</li><li><strong>行内文档标签</strong>则可以在 javadoc 注释中的任何位置，同样以<code>@</code>开头，但要在花括号内。</li></ul></li></ul><p>常用的标签有：</p><ul><li><code>@see</code>：引用其他类，会生成一个超链接条目（不会校验该链接是否有效），超链接文本为“See Also”  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@see</span> classname</span><br><span class="line"><span class="meta">@see</span> fully-qualified-classname</span><br><span class="line"><span class="meta">@see</span> fully-qualified-classname<span class="meta">@method</span>-name</span><br></pre></td></tr></table></figure></li><li><code>{@link package.class#member label}</code>：与<code>@see</code>类似，不过是行内标签，使用“label”来处理作为超链接文本</li><li><code>{@docRoot}</code>：该标签产生到文档根目录的相对路径</li><li><code>{@inheritDoc}</code>：该标签从当前这个类最直接的基类继承相关文档到当前文档注释中</li><li><code>@version</code>:版本信息</li><li><code>@author</code>:作者信息</li><li><code>@since</code>:指定JDK版本最低为多少</li><li><code>@param</code>:表示参数含义，形式如<code>@param parameter-name description</code></li><li><code>@return</code>:描述返回值，形式如<code>@return description</code></li><li><code>@throws</code>:异常描述，该方法可能抛出的每个异常都需要说明，形式如<code>@throws fully-qualified-class-name description</code></li><li><code>@deprecated</code>:指出一些旧特性已由改进的新特性所取代，不建议使用。调用一个标记为<code>@deprecated</code>的方法，编译器会发出警告。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HelloDate.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** A class comment</span></span><br><span class="line"><span class="comment"> * Test comment</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wuxiaobai24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloDate</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** a field comment */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * a &lt;strong&gt;protected&lt;/strong&gt; filed comment</span></span><br><span class="line"><span class="comment">     * &lt;ol&gt;</span></span><br><span class="line"><span class="comment">     *  &lt;li&gt;one&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *  &lt;li&gt;two&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *  &lt;li&gt;three&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ol&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> p;</span><br><span class="line">    <span class="comment">/** a private field comment */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** A method comment</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args args comment</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, it's"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://imagehosting.wuxiaobai24.fun//blog%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH02-%E4%B8%80%E5%88%87%E9%83%BD%E6%98%AF%E5%AF%B9%E8%B1%A1-20200208150609-2020-2-8-15-6-9" alt="javadoc输出1"><br><img src="http://imagehosting.wuxiaobai24.fun//blog%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH02-%E4%B8%80%E5%88%87%E9%83%BD%E6%98%AF%E5%AF%B9%E8%B1%A1-javadoc%E8%BE%93%E5%87%BA-2020-2-8-15-7-31" alt="《-Java-编程思想》CH02-一切都是对象-javadoc输出-2020-2-8-15-7-31"><br><img src="http://imagehosting.wuxiaobai24.fun//blog%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH02-%E4%B8%80%E5%88%87%E9%83%BD%E6%98%AF%E5%AF%B9%E8%B1%A1-javadoc%E8%BE%93%E5%87%BA2-2020-2-8-15-7-59" alt="《-Java-编程思想》CH02-一切都是对象-javadoc输出2-2020-2-8-15-7-59"></p><h2 id="编码风格"><a href="#编码风格" class="headerlink" title="编码风格"></a>编码风格</h2><ul><li>驼峰式写法</li><li>标识符的第一个字符采用小写，其余用大写</li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ex1.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ex1 e = <span class="keyword">new</span> Ex1();</span><br><span class="line">        System.out.println(e.i);</span><br><span class="line">        System.out.println(e.c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ex2.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习3-amp-练习4-amp-练习5"><a href="#练习3-amp-练习4-amp-练习5" class="headerlink" title="练习3 &amp; 练习4 &amp; 练习5"></a>练习3 &amp; 练习4 &amp; 练习5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ex3.java</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataOnly</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">    <span class="keyword">boolean</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ATypeName</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ATypeName a = <span class="keyword">new</span> ATypeName();</span><br><span class="line">        DataOnly d = <span class="keyword">new</span> DataOnly();</span><br><span class="line">        d.i = <span class="number">1</span>;</span><br><span class="line">        d.d = <span class="number">2.0</span>;</span><br><span class="line">        d.b = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(d.i);</span><br><span class="line">        System.out.println(d.d);</span><br><span class="line">        System.out.println(d.b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习6"><a href="#练习6" class="headerlink" title="练习6"></a>练习6</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ex4.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">storage</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.length() * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br><span class="line">        Ex4 e = <span class="keyword">new</span> Ex4();</span><br><span class="line">        <span class="keyword">int</span> len = e.storage(s);</span><br><span class="line">        System.out.println(len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习7-amp-练习8"><a href="#练习7-amp-练习8" class="headerlink" title="练习7 &amp; 练习8"></a>练习7 &amp; 练习8</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ex7.java</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">47</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Incrementable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123; StaticTest.i++; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StaticTest st1 = <span class="keyword">new</span> StaticTest();</span><br><span class="line">        Incrementable.increment();</span><br><span class="line">        StaticTest st2 = <span class="keyword">new</span> StaticTest();</span><br><span class="line">        System.out.println(st1.i);</span><br><span class="line">        System.out.println(st2.i);</span><br><span class="line">        System.out.println(StaticTest.i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习9"><a href="#练习9" class="headerlink" title="练习9"></a>练习9</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ex9.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">24</span>;</span><br><span class="line">        Integer bi = i;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(bi);</span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习10"><a href="#练习10" class="headerlink" title="练习10"></a>练习10</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ex10.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length == <span class="number">3</span>) &#123;</span><br><span class="line">            System.out.println(args[<span class="number">0</span>]);</span><br><span class="line">            System.out.println(args[<span class="number">1</span>]);</span><br><span class="line">            System.out.println(args[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习11"><a href="#练习11" class="headerlink" title="练习11"></a>练习11</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ex11.java</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllTheColorsOfTheRainbow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> anIntegerRepresentingColors;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeTheHueOfTheColor</span><span class="params">(<span class="keyword">int</span> newHue)</span> </span>&#123;</span><br><span class="line">        anIntegerRepresentingColors = newHue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AllTheColorsOfTheRainbow allTheColorsOfTheRainbow = <span class="keyword">new</span> AllTheColorsOfTheRainbow();</span><br><span class="line">        allTheColorsOfTheRainbow.changeTheHueOfTheColor(<span class="number">1</span>);</span><br><span class="line">        System.out.println(allTheColorsOfTheRainbow.anIntegerRepresentingColors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/categories/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
    
      <category term="Java" scheme="http://blog.codeand.fun/tags/Java/"/>
    
      <category term="阅读笔记" scheme="http://blog.codeand.fun/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
      <category term="后端" scheme="http://blog.codeand.fun/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>《 Java 编程思想》CH01 对象的概念</title>
    <link href="http://blog.codeand.fun/2020/02/06/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH01-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
    <id>http://blog.codeand.fun/2020/02/06/%E3%80%8A-Java-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8BCH01-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A6%82%E5%BF%B5/</id>
    <published>2020-02-06T23:52:38.000Z</published>
    <updated>2020-04-02T14:43:48.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《-Java-编程思想》CH01-对象的概念"><a href="#《-Java-编程思想》CH01-对象的概念" class="headerlink" title="《 Java 编程思想》CH01 对象的概念"></a>《 Java 编程思想》CH01 对象的概念</h1><p>@(后端开发)[Java, 阅读笔记]</p><p>[TOC]</p><h2 id="抽象过程"><a href="#抽象过程" class="headerlink" title="抽象过程"></a>抽象过程</h2><p>所有编程语言都提供抽象机制，人们所能解决的问题的复杂性直接取决于抽象的类型和质量。</p><p>OOP 允许根据问题来描述问题，而不是根据运行解决方案的计算机来描述问题。</p><h3 id="纯粹的面向对象程序设计方法："><a href="#纯粹的面向对象程序设计方法：" class="headerlink" title="纯粹的面向对象程序设计方法："></a>纯粹的面向对象程序设计方法：</h3><ul><li>万物皆对象</li><li>程序是对象的集合</li><li>每个对象都有自己的由其他对象所构成的存储</li><li>每个对象都拥有类型</li><li>某一个特定类型的所有对象都可以接收同样的信息</li></ul><p><strong>对象具有状态、行为和标识</strong></p><h2 id="每个对象都有一个接口"><a href="#每个对象都有一个接口" class="headerlink" title="每个对象都有一个接口"></a>每个对象都有一个接口</h2><p>所有的对象都是唯一的，但同时也是具有相同特性和行为的对象所归属的类的一部分。</p><p>类描述了具有相同特性（数据元素）和行为（功能）的对象集合，所以<strong>一个类实际上就是一个数据类型</strong>。</p><p>面向对象程序设计的挑战之一，就是在问题空间的元素和解空间的对象之间创建一对一的映射。</p><p>每个对象都只能满足某些请求，这些请求由对象的接口（interface）所定义，决定接口的便是类型。</p><p>接口确定了某一个特定对象所能发出的请求，但是，在程序中必须有满足这些请求的代码，这些代码与隐藏的数据一起构成了<em>实现</em>（implement）</p><h2 id="每个对象都提供服务"><a href="#每个对象都提供服务" class="headerlink" title="每个对象都提供服务"></a>每个对象都提供服务</h2><p>当正在试图开发或理解一个程序设计，最好的方法之一就是将对象想象成“服务提供者”</p><p><strong>高内聚</strong>是软件设计的基本质量要求之一：这意味着一个软件构件的各个方面“组合的好”</p><h2 id="被隐藏的具体实现"><a href="#被隐藏的具体实现" class="headerlink" title="被隐藏的具体实现"></a>被隐藏的具体实现</h2><p>将程序开发人员按照角色分为<em>类创建者</em>和<em>客户端程序员</em>：</p><ul><li>客户端程序员的目标是收集各种用来实现快速应用开发的类。</li><li>类创建者的目标是构建类，这种类只向客户端程序员暴露必需的部分，而隐藏其他部分。</li></ul><p>将实现隐藏起来可以减少程序的 bug，即<strong>访问控制</strong>，访问控制存在的原因：</p><ol><li>让客户端程序员无法触及他们不应该触及的部分。</li><li>允许库设计者可以改变类内部的工作方式而不担心会影响到客户端程序员。</li></ol><p>Java 中的四种访问权限：</p><ul><li><code>public</code>：任何人都是可用的</li><li><code>private</code>：除了类型创建者和类型的内部方法之外任何人都不能访问</li><li><code>protected</code>：与 <code>private</code> 类似，差别在与继承于该类的派生类可以访问<code>protected</code> 成员</li><li><code>default</code>：包访问权限，同一个包中其他类可以访问。</li></ul><h2 id="复用具体实现"><a href="#复用具体实现" class="headerlink" title="复用具体实现"></a>复用具体实现</h2><p><strong>代码复用是面向对象程序设计语言所提供的最了不起的优点之一</strong></p><p><strong>组合</strong>（“has-a”关系）：新的类可以由任意数量、类型的其他对象以任意可以实现新的类中想要的功能的方式组成。如果组合是动态发生的，那么它通常被称为“聚合”</p><p>*在建立新类时，应该首先考虑组合，而不是继承，因为它更加简单灵活。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>两个类型可以有相同的特性和行为，但是其中一个类型可能比另一个含有更多的特性。继承使用基类型和派生类型的概念表示了这种类型之间的相似性。</p><p>一个基类型包含所有派生类所共享的特性和行为，可以创建一个基类型来表示系统中某些对象的核心概念，从基类型中派生出其他类型，来表示该核心可以被不同的方式实现。</p><p>通过继承而产生的类型等价性是理解面向对象程序设计方法内涵的重要门槛。</p><p>基类与派生类的相似性：所有可以发送给基类对象的消息同时也可以发送给派生类对象。<br>产生基类与派生类的差异性的两种形式：</p><ol><li>在派生类添加新方法</li><li>在派生类中改变现有基类的方法，即覆盖</li></ol><h3 id="“是一个”与“像是一个”"><a href="#“是一个”与“像是一个”" class="headerlink" title="“是一个”与“像是一个”"></a>“是一个”与“像是一个”</h3><ul><li>“是一个”（is-a）：只是覆盖，没有添加新的方法。</li><li>“像是一个”（is-like-a）：添加了新的方法。</li></ul><h3 id="伴随多态的可互换对象"><a href="#伴随多态的可互换对象" class="headerlink" title="伴随多态的可互换对象"></a>伴随多态的可互换对象</h3><p>在处理类型的层次结构时，把一个对象不当做它所属的特性类型来对待，而是将其当做其基类的对象来对待，这一可以编写出不依赖于特定类型的代码。</p><p>为了实现泛型，面向对象程序设计语言使用了<em>后期绑定</em>的概念，当向对象发送消息时，被调用的代码直到运行时才能确定。编译器确保被调用方法的存在，并对调用参数和返回值执行类型检查，但是并不知道将被执行的确切代码。</p><p>Java 使用了一小段特殊的代码来代替绝对地址调用。</p><p>在某些语言中（如C++），必须明确声明希望某个方法具备后期绑定，而 Java 中，动态绑定是默认行为，不需要额外添加关键字来实现多态。</p><h2 id="单根继承结构"><a href="#单根继承结构" class="headerlink" title="单根继承结构"></a>单根继承结构</h2><blockquote><p>所有的类都最终继承自单一的基类，Java 中 这个类为 <code>Object</code>。</p></blockquote><p>在单根继承结构中的所有对象都具有一个公用接口，所以它们归根到底都是相同的基本类型。</p><p>单根继承结构使得垃圾回收的实现变得容易得多。</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><ul><li>不同容器提供了不同类型的接口和外部行为</li><li>不同容器对于某些操作具有不同的效率</li></ul><h3 id="参数化类型"><a href="#参数化类型" class="headerlink" title="参数化类型"></a>参数化类型</h3><p>容器是通过<strong>向下转型</strong>实现的，容器知道元素转型前的类型，则可以实现容器，这种解决方法即<strong>参数化类型</strong>，即<strong>泛型</strong>。</p><h2 id="对象的创建和生命期"><a href="#对象的创建和生命期" class="headerlink" title="对象的创建和生命期"></a>对象的创建和生命期</h2><ul><li>Java 完全采用动态内存分配方式，每当想要创建新对象时，就要使用 <code>new</code> 关键字来构建此对象的动态实例。</li><li>Java 提供了“垃圾回收”机制，它可以自动发现对象何时不再被使用，进而销毁它。</li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>大多数错误机制的主要问题在于，它们都依赖于程序员自身的警惕性，这种警惕性来源于一种共同的约定，而不是编程语言所强制的。这种机制容易被忽视。</p><p>被抛出的异常不像方法返回的错误值和方法设置的用来表示错误条件的标志位那样可以被忽略。<strong>异常不能被忽视，所以它保证一定会在某处得到处理</strong>。</p><p>异常处理不是面向对象的特性。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/categories/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
    
      <category term="Java" scheme="http://blog.codeand.fun/tags/Java/"/>
    
      <category term="阅读笔记" scheme="http://blog.codeand.fun/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://blog.codeand.fun/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
      <category term="后端" scheme="http://blog.codeand.fun/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Delete Leaves With a Given Value Medium</title>
    <link href="http://blog.codeand.fun/2020/02/02/Delete-Leaves-With-a-Given-ValueMedium/"/>
    <id>http://blog.codeand.fun/2020/02/02/Delete-Leaves-With-a-Given-ValueMedium/</id>
    <published>2020-02-02T15:03:20.000Z</published>
    <updated>2020-04-02T14:43:48.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第63天。</p></blockquote><p>水题。</p><p>今天的题目是<a href="https://leetcode.com/problems/delete-leaves-with-a-given-value/" target="_blank" rel="noopener">Delete Leaves With a Given Value Medium</a>:</p><p>太水了，不解释了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">removeLeafNodes</span><span class="params">(TreeNode* root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">root-&gt;left = removeLeafNodes(root-&gt;left, target);</span><br><span class="line">root-&gt;right = removeLeafNodes(root-&gt;right, target);</span><br><span class="line"><span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; target == root-&gt;val)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Deepest Leaves Sum</title>
    <link href="http://blog.codeand.fun/2020/01/31/Deepest-Leaves-Sum/"/>
    <id>http://blog.codeand.fun/2020/01/31/Deepest-Leaves-Sum/</id>
    <published>2020-01-31T17:08:45.000Z</published>
    <updated>2020-04-02T14:43:48.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第62天。</p></blockquote><p>今天的题目是<a href="https://leetcode.com/problems/deepest-leaves-sum/" target="_blank" rel="noopener">Deepest Leaves Sum</a>:</p><p>比较简单的题目，只要用层次遍历即可，计算每一层的和，然后把最后一层返回即可。也可以用后序遍历来完成，不过要维护每个子树的高度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deepestLeavesSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;TreeNode *&gt; q;</span><br><span class="line">q.push(root);</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, <span class="built_in">size</span> = q.<span class="built_in">size</span>(); i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">root = q.front(); q.pop();</span><br><span class="line">sum += root-&gt;val;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;left) q.push(root-&gt;left);</span><br><span class="line"><span class="keyword">if</span> (root-&gt;right) q.push(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Jump Game III</title>
    <link href="http://blog.codeand.fun/2020/01/28/Jump-Game-III/"/>
    <id>http://blog.codeand.fun/2020/01/28/Jump-Game-III/</id>
    <published>2020-01-28T12:35:04.000Z</published>
    <updated>2020-04-02T14:43:48.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第61天。</p></blockquote><p>今天的题目是<a href="https://leetcode.com/problems/jump-game-iii/" target="_blank" rel="noopener">Jump Game III</a>:</p><p>用广度优先遍历出来即可，为了防止死循环，所以我们需要一个<code>visited</code>数组来记录某个位置的元素是否已经访问过来（即是否压入了队列中）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canReach</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">visited</span><span class="params">(arr.<span class="built_in">size</span>(), <span class="literal">false</span>)</span></span>;</span><br><span class="line">q.push(start);</span><br><span class="line">visited[start] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, <span class="built_in">size</span> = q.<span class="built_in">size</span>(); i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">start = q.front(); q.pop();</span><br><span class="line"><span class="keyword">if</span> (arr[start] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (start - arr[start] &gt;= <span class="number">0</span> &amp;&amp; visited[start - arr[start]] == <span class="literal">false</span>) &#123;</span><br><span class="line">q.push(start - arr[start]);</span><br><span class="line">visited[start - arr[start]] = <span class="literal">true</span>;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">if</span> (start + arr[start] &lt; arr.<span class="built_in">size</span>() &amp;&amp; visited[start + arr[start]] == <span class="literal">false</span>) &#123; </span><br><span class="line">q.push(start + arr[start]);</span><br><span class="line">visited[start + arr[start]] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Top K Frequent Elements</title>
    <link href="http://blog.codeand.fun/2020/01/27/Top-K-Frequent-Elements/"/>
    <id>http://blog.codeand.fun/2020/01/27/Top-K-Frequent-Elements/</id>
    <published>2020-01-27T21:58:53.000Z</published>
    <updated>2020-04-02T14:43:48.839Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第60天。hhh，一回家就没做了。在家无聊到开始找活干了。</p></blockquote><p>今天的题目是<a href="https://leetcode.com/problems/top-k-frequent-elements/" target="_blank" rel="noopener">347. Top K Frequent Elements</a>:</p><p>挺简单的题目，先统计元素出现的次数，然后根据元素出现的次数来进行排序，然后取出现次数最多的前K个即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">topKFrequent1</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(k)</span></span>;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; imap;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, n = nums.<span class="built_in">size</span>(); i &lt; n; i++) &#123;</span><br><span class="line">imap[nums[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;pair&lt;int, int&gt;&gt; temp(imap.begin(), imap.end());</span><br><span class="line"><span class="keyword">auto</span> f = [](<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;p1, <span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;p2) &#123;</span><br><span class="line"><span class="keyword">return</span> p1.second &gt; p2.second;  </span><br><span class="line">&#125;;</span><br><span class="line">sort(temp.<span class="built_in">begin</span>(), temp.<span class="built_in">end</span>(), f);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; k; i++) &#123;</span><br><span class="line">res[i] = temp[i].first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.codeand.fun/tags/LeetCode/"/>
    
  </entry>
  
</feed>
